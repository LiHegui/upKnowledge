import{_ as a,e as s,f as i,o as t}from"./app-BeRZjn83.js";const n={};function r(l,e){return t(),s("div",null,e[0]||(e[0]=[i(`<h1 id="pull" tabindex="-1"><a class="header-anchor" href="#pull"><span>pull</span></a></h1><h1 id="merge" tabindex="-1"><a class="header-anchor" href="#merge"><span>merge</span></a></h1><h1 id="fetch" tabindex="-1"><a class="header-anchor" href="#fetch"><span>fetch</span></a></h1><p>之前我们说过 git pull = git fetch + git merge 执行pull操作是直接将其拉取进行合并</p><h1 id="rebase" tabindex="-1"><a class="header-anchor" href="#rebase"><span>rebase</span></a></h1><p>rebase实际上就是取出一系列的提交记录，“复制”，放在另外一个地方进行操作提交。 rebase可以创造更加线性的提交历史。</p><h1 id="head" tabindex="-1"><a class="header-anchor" href="#head"><span>HEAD</span></a></h1><p>HEAD是对当前所在分支的符号引用--也就是指向你正在基础上进行工作的提交记录。 HEAD总是指向当前分支上的最近一次的提交。 <strong>分离的HEAD</strong> 分离的HEAD就是让其指向了某个具体的提交记录而不是分支名。 分离时是没有办法使用reset, 可以使用checkout</p><p>强制指向</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">    git branch -f [yourbranch] [HashValue]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="相对引用" tabindex="-1"><a class="header-anchor" href="#相对引用"><span>相对引用</span></a></h1><p>当前分支上</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">git chekout HEAD^</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="撤销变更" tabindex="-1"><a class="header-anchor" href="#撤销变更"><span>撤销变更</span></a></h1><p>撤销变更是由更底层部分（暂存区的独立片段或者片段）和上层部分（变更到底是通过哪种方式被撤销的）。</p><h2 id="reset" tabindex="-1"><a class="header-anchor" href="#reset"><span>reset</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">git reset HEAD</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>会导致本地的记录确实</p><h2 id="revert" tabindex="-1"><a class="header-anchor" href="#revert"><span>revert</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">git revert HEAD</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>会进行重新提交，相当于把前一个节点进行覆盖commit,之前的记录不会缺失</p><h1 id="自由修改" tabindex="-1"><a class="header-anchor" href="#自由修改"><span>自由修改</span></a></h1><h2 id="cherry-pick" tabindex="-1"><a class="header-anchor" href="#cherry-pick"><span>cherry-pick</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">git cherry-pick &lt;提交号&gt;...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将一些提交<strong>复制</strong>到当前所在的位置（HEAD）下面 cherry-pick 是最直接的方式 要在心里牢记 cherry-pick 可以将提交树上任何地方的提交记录取过来追加到 HEAD 上（只要不是 HEAD 上游的提交就没问题）。</p><h2 id="交互式的rebase" tabindex="-1"><a class="header-anchor" href="#交互式的rebase"><span>交互式的rebase</span></a></h2><p>如果我们知道对应的提交记录以及它的哈希值，用cherry-pick是极其简单的。 如果我们并不清楚所对应的hash值，接下来就是我所要说的内容 所谓是交互式的rebase,是指携带 --interactive的rebase命令，简写-i</p><ol><li>我们使用了该命令 在之前的4次提交记录进行自由选择顺序，自由剔除<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">    git rebase -i HEAD~4    </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li>Git会打开一个UI界面并列出将要被复制到目标分支的备选提交记录。</li><li>然后用鼠标拖放完成</li></ol><h1 id="tag" tabindex="-1"><a class="header-anchor" href="#tag"><span>tag</span></a></h1><blockquote><p>永久指向某个提交记录的标识</p></blockquote><h1 id="describe" tabindex="-1"><a class="header-anchor" href="#describe"><span>describe</span></a></h1><p>用来描述离当前位置最近的锚点</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">git describe &lt;ref&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>会显示结果</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&lt;tag&gt;_&lt;numCommits&gt;_g&lt;hash&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面的结果清晰明了，在这里就不再赘述</p><h1 id="clone" tabindex="-1"><a class="header-anchor" href="#clone"><span>clone</span></a></h1><h1 id="高级" tabindex="-1"><a class="header-anchor" href="#高级"><span>高级</span></a></h1><h2 id="多分支" tabindex="-1"><a class="header-anchor" href="#多分支"><span>多分支</span></a></h2>`,39)]))}const c=a(n,[["render",r],["__file","git.html.vue"]]),h=JSON.parse('{"path":"/interview/git/%E7%9F%A5%E8%AF%86%E5%BA%93/git.html","title":"pull","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"reset","slug":"reset","link":"#reset","children":[]},{"level":2,"title":"revert","slug":"revert","link":"#revert","children":[]},{"level":2,"title":"cherry-pick","slug":"cherry-pick","link":"#cherry-pick","children":[]},{"level":2,"title":"交互式的rebase","slug":"交互式的rebase","link":"#交互式的rebase","children":[]},{"level":2,"title":"多分支","slug":"多分支","link":"#多分支","children":[]}],"git":{"updatedTime":1738722167000,"contributors":[{"name":"LiHegui","username":"LiHegui","email":"1487647822@qq.com","commits":1,"url":"https://github.com/LiHegui"}]},"filePathRelative":"interview/git/知识库/git.md"}');export{c as comp,h as data};
