import{_ as c,e as i,f as a,g as s,j as p,h as t,i as r,r as e,o as u}from"./app-BeRZjn83.js";const d="/upKnowledge/assets/render-BcQA-m3J.png",k={},v={start:"2"},m={id:"react-高阶组件",tabindex:"-1"},g={class:"header-anchor",href:"#react-高阶组件"};function b(h,n){const o=e("App"),l=e("RouteLink");return u(),i("div",null,[n[3]||(n[3]=a(`<h1 id="react面试题" tabindex="-1"><a class="header-anchor" href="#react面试题"><span>React面试题</span></a></h1><h2 id="谈谈你对react的理解" tabindex="-1"><a class="header-anchor" href="#谈谈你对react的理解"><span>谈谈你对React的理解</span></a></h2><p>React是构建用户界面的JavaScript库，只提供了UI层面的解决方案。 遵循组件设计模式，函数式编程的编程概念</p><p>特点：</p><ul><li><p>JSX的语法</p></li><li><p>单向数据流</p><blockquote><p>React中的单向数据绑定是指数据流从上至下，从父组件流向子组件。 父组件负责传递数据给子组件，子组件根据这些数据进行渲染。 这种数据流方式有助于简化组件间的关系，提高代码的可维护性和可读性。</p></blockquote><p>子组件不能直接修改父组件的数据，可以选择通知父组件（父组件中写好更新函数）进行修改</p></li><li><p>虚拟DOM</p></li><li><p>声明式编程</p></li><li><p>component 更注重抽离和组件化</p><p>组件式开发，提高代码复用率 应该具有的特点：可组合，可重用，可维护</p><p>注意，React组件首字母要大写，小写的话会被认为是原生DOM标签。（要通过Babel去对JSX进行转化为对应的JS对象，才能让浏览器识别。此时就会有个依据去判断是原生DOM标签，还是React组件，而这个依据就是标签的首字母）</p><p>React.Fragment 等价于&lt;&gt;&lt;/&gt;</p><p>组件化思想，页面会被切分成一些独立的、可复用的组件</p></li></ul><h2 id="jsx转成真实dom的过程" tabindex="-1"><a class="header-anchor" href="#jsx转成真实dom的过程"><span>JSX转成真实DOM的过程</span></a></h2><p>JSX是JavaScript的一种语法拓展，它和模板语言很像，但是它具备充分的JavaScript的能力</p><p>经过babel的处理</p><ol><li>JSX 会被编译为React.createElement(), React.createElement()将会返回一个叫做React Element的JS对象 这里的编译就是指babel</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">* React.createElement</span>
<span class="line">* <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">type</span> 用于标识节点的类型</span>
<span class="line">* <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">config</span> 以对象形式传入，组件所有的属性都会以键值对的形式储存到conig对象中</span>
<span class="line">* <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">children</span> 以对象的形式传入，，它记录的是组件标签之间的嵌套的内容</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> config<span class="token punctuation">,</span> children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🔨 demo</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ClassComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>     <span class="token comment">// 类式组件</span></span>
<span class="line">  <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;pink&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;border&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>ClassComponent<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>color<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p <span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">FunctionComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 函数式组件</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;border&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">      FunctionComponent</span>
<span class="line">      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p <span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> jsx <span class="token operator">=</span> <span class="token punctuation">(</span>                        </span>
<span class="line">  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;border&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>xx<span class="token operator">&lt;</span><span class="token operator">/</span>p <span class="token operator">&gt;</span>                   </span>
<span class="line">    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;#&quot;</span><span class="token operator">&gt;</span>xxx<span class="token operator">&lt;</span><span class="token operator">/</span> a<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>FunctionComponent name<span class="token operator">=</span><span class="token string">&quot;函数组件&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>ClassComponent name<span class="token operator">=</span><span class="token string">&quot;类组件&quot;</span> color<span class="token operator">=</span><span class="token string">&quot;red&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里值得注意的是</p><p>JSX -&gt; babel -&gt; React.createElement -&gt; ReactElement -&gt; 虚拟DOM -&gt;ReactDoM.render() -&gt; 真实DOM</p><p>在转化过程中，babel在编译时会判断 JSX 中组件的首字母：</p><p>当首字母为小写时，其被认定为原生 DOM 标签，createElement 的第一个变量被编译为字符串</p><p>当首字母为大写时，其被认定为自定义组件，createElement 的第一个变量被编译为对象</p><p>React.createElement其被调用时会传⼊标签类型type，标签属性props及若干子元素children</p>`,18)),s("ol",v,[s("li",null,[n[0]||(n[0]=p("最后，React.render会将React Element对象渲染到真实的DOM 最后就是挂载某个节点上 ReactDOM.render(")),t(o),n[1]||(n[1]=p(', document.getElementById("root"));'))])]),n[4]||(n[4]=a(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token comment">// 需要渲染的元素(ReactElement)</span></span>
<span class="line">  element<span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 元素挂载的目标容器</span></span>
<span class="line">  container<span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 回调函数， 可选参数，， 可以用来处理渲染结束后的逻辑</span></span>
<span class="line">  callback</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个流程图解</p><p><img src="`+d+`" alt=""></p><h2 id="说说-real-dom-和-virtual-dom-的区别-优缺点" tabindex="-1"><a class="header-anchor" href="#说说-real-dom-和-virtual-dom-的区别-优缺点"><span>说说 Real DOM 和 Virtual DOM 的区别？优缺点？</span></a></h2><p>虚拟Dom是<code>React.createElement</code>创建的对象，是一个虚拟的DOM节点，是一个JS对象，它是一个轻量级的JavaScript对象，用于描述真实DOM的结构和属性。</p><p><strong>对比</strong></p><ul><li><p>在传统的Web应用中，数据的变化会实时地更新到用户界面中，于是每次数据微小的变化都会引起DOM的渲染。</p></li><li><p>虚拟DOM的目地：是将所有的操作聚集到一块，计算出所有的变化后，统一更新一次虚拟DOM</p></li></ul><p>也就是说，一个页面如果有500次变化，没有虚拟DOM的就会渲染500次，而虚拟DOM只需要渲染一次，从这点上来看，页面越复杂，虚拟DOM的优势越大</p><p><strong>核心依据：浏览器在处理DOM的时候会很慢，处理JavaScript会很快</strong></p><p>组件更新 -&gt; render方法 -&gt; 生成新的虚拟DOM -&gt; diff算法 -&gt; 定位两次的差异 -&gt; 渲染真实DOM</p><p>推荐文章</p><p><a href="https://juejin.cn/post/7116326409961734152?searchId=202502171412563BE24C347D355A9FBD37" target="_blank" rel="noopener noreferrer">「React深入」一文吃透虚拟DOM和diff算法</a></p><h2 id="useref和usestate的区别" tabindex="-1"><a class="header-anchor" href="#useref和usestate的区别"><span>useRef和useState的区别</span></a></h2><p><strong><code>useRef</code></strong></p><p>在整个组件生命周期中存储一个可变的引用，这个引用不会触发组件的重新渲染。useRef返回一个可变的ref对象，其.current属性被初始化为传入的参数（useRef(initValue)）。</p><ul><li>获取元素 useRef 返回一个可变的 ref 对象</li><li>保存变量 保存变量，在组件重新渲染时不会丢失</li></ul><p><strong><code>useState</code></strong></p><p>使用, 返回两个值，state，和更新函数</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="说说对react中类组件和函数组件的理解-有什么区别" tabindex="-1"><a class="header-anchor" href="#说说对react中类组件和函数组件的理解-有什么区别"><span>说说对React中类组件和函数组件的理解？有什么区别？</span></a></h2><h2 id="super-和-super-props-有什么区别" tabindex="-1"><a class="header-anchor" href="#super-和-super-props-有什么区别"><span>super() 和 super(props) 有什么区别？</span></a></h2><p>在 React 中，<code>super()</code> 和 <code>super(props)</code> 的区别主要体现在类组件的构造函数中，尤其是在处理 <code>props</code> 时。</p><ol><li><code>super()</code></li></ol><ul><li><strong>作用</strong>: 调用父类的构造函数。</li><li><strong>使用场景</strong>: 如果你在构造函数中没有用到 <code>this.props</code>，可以使用 <code>super()</code>。</li><li><strong>示例</strong>:<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>在这种情况下，<code>this.props</code> 是 <code>undefined</code>，因为 <code>super()</code> 没有传递 <code>props</code> 给父类。</li></ul><ol start="2"><li><code>super(props)</code></li></ol><ul><li><strong>作用</strong>: 调用父类的构造函数，并将 <code>props</code> 传递给父类。</li><li><strong>使用场景</strong>: 如果你在构造函数中需要访问 <code>this.props</code>，必须使用 <code>super(props)</code>。</li><li><strong>示例</strong>:<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以访问 this.props</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>在这种情况下，<code>this.props</code> 是可用的，因为 <code>super(props)</code> 将 <code>props</code> 传递给了父类。</li></ul><ol start="3"><li>总结</li></ol><ul><li><strong><code>super()</code></strong>: 不传递 <code>props</code>，构造函数中 <code>this.props</code> 为 <code>undefined</code>。</li><li><strong><code>super(props)</code></strong>: 传递 <code>props</code>，构造函数中 <code>this.props</code> 可用。</li></ul><ol start="4"><li>最佳实践</li></ol><ul><li>如果你在构造函数中需要访问 <code>this.props</code>，使用 <code>super(props)</code>。</li><li>如果你不需要访问 <code>this.props</code>，可以使用 <code>super()</code>。</li></ul><ol start="5"><li><p>现代 React 中的变化 在现代 React 中，使用类组件的场景越来越少，函数组件和 Hooks 更为常见。如果你使用函数组件，就不需要关心 <code>super()</code> 和 <code>super(props)</code> 的问题了。</p></li><li><p>示例代码</p></li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传递 props</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以访问 this.props</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">AnotherComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不传递 props</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过理解 <code>super()</code> 和 <code>super(props)</code> 的区别，你可以更好地控制类组件中的 <code>props</code> 访问。</p><h2 id="说说react的事件机制" tabindex="-1"><a class="header-anchor" href="#说说react的事件机制"><span>说说React的事件机制？</span></a></h2><p>React基于浏览器的事件机制自身实现了一套事件机制，包括事件注册、事件的合成、事件冒泡、事件派发等</p><p>在React中这套事件机制被称之为合成事件</p><p>React 的事件机制与原生 DOM 事件机制有所不同，它是 React 自己实现的一套**合成事件（Synthetic Event）**系统。这套机制的主要目的是解决跨浏览器兼容性问题，并提供更高效的事件处理方式。以下是 React 事件机制的核心特点和实现原理：</p><hr><ol><li><strong>合成事件（Synthetic Event）</strong></li></ol><p>React 的事件是合成事件，它是 React 封装的一个跨浏览器的事件对象。合成事件是对原生 DOM 事件的包装，提供了统一的 API 和行为，确保在不同浏览器中表现一致。</p><ul><li><strong>特点</strong>： <ul><li>合成事件是跨浏览器的，兼容所有主流浏览器。</li><li>合成事件是池化的（pooled），即事件对象会被复用，事件回调执行完毕后，事件对象的属性会被清空。</li><li>合成事件通过事件委托机制绑定到根节点（如 <code>document</code> 或 <code>ReactDOM.render</code> 的容器），而不是直接绑定到具体的 DOM 元素。</li></ul></li></ul><hr><ol start="2"><li><strong>事件委托</strong> React 使用了<strong>事件委托</strong>机制，将所有事件绑定到根节点（如 <code>document</code>），而不是直接绑定到具体的 DOM 元素。当事件触发时，React 会根据事件的目标（<code>event.target</code>）找到对应的组件，并调用相应的事件处理函数。</li></ol><ul><li><strong>优点</strong>： <ul><li>减少内存消耗：不需要为每个 DOM 元素绑定事件。</li><li>动态绑定：即使组件动态添加或删除，也不需要手动绑定或解绑事件。</li></ul></li></ul><hr><ol start="3"><li><strong>事件绑定</strong> 在 React 中，事件绑定是通过 JSX 的属性（如 <code>onClick</code>、<code>onChange</code>）来实现的。React 会自动将这些事件绑定到根节点，并在事件触发时调用相应的事件处理函数。</li></ol><p><strong>示例</strong>：</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Button clicked!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>onClick</code> 是一个合成事件，React 会将其绑定到根节点，并在点击按钮时调用 <code>handleClick</code> 函数。</p><hr><ol start="4"><li><strong>事件池化（Event Pooling）</strong> React 的合成事件是池化的，即事件对象会被复用。事件回调执行完毕后，事件对象的属性会被清空，以减少内存分配和垃圾回收的开销。</li></ol><ul><li><strong>注意事项</strong>： <ul><li>如果需要异步访问事件对象（如在 <code>setTimeout</code> 或 <code>Promise</code> 中），需要调用 <code>event.persist()</code> 来从池中移除事件对象，否则事件对象的属性会被清空。</li></ul></li></ul><p><strong>示例</strong>：</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    event<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从池中移除事件对象</span></span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以正常访问事件对象</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ol start="5"><li><strong>事件传播</strong> React 的事件传播机制与原生 DOM 事件类似，分为三个阶段：</li><li><strong>捕获阶段</strong>：从根节点向下传播到目标节点。</li><li><strong>目标阶段</strong>：事件到达目标节点。</li><li><strong>冒泡阶段</strong>：从目标节点向上传播到根节点。</li></ol><p>在 React 中，事件处理函数默认在冒泡阶段触发。如果需要监听捕获阶段的事件，可以使用 <code>onClickCapture</code> 这样的属性。</p><p><strong>示例</strong>：</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Bubbling phase&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClickCapture</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Capturing phase&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClickCapture</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClickCapture<span class="token punctuation">}</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ol start="6"><li><strong>与原生事件的对比</strong> | 特性 | 原生 DOM 事件 | React 合成事件 | |---------------------|-------------------------------|-------------------------------| | 事件绑定 | 直接绑定到 DOM 元素 | 绑定到根节点，事件委托 | | 事件对象 | 原生 <code>Event</code> 对象 | 合成事件对象（<code>SyntheticEvent</code>）| | 跨浏览器兼容性 | 需要手动处理 | 自动处理 | | 事件池化 | 无 | 有 | | 事件传播 | 支持捕获和冒泡 | 支持捕获和冒泡 |</li></ol><hr><ol start="7"><li><strong>React 17 中的事件委托变化</strong> 在 React 17 之前，合成事件是绑定到 <code>document</code> 上的。从 React 17 开始，合成事件改为绑定到 <code>ReactDOM.render</code> 的根容器上。这一变化使得 React 应用可以更好地与其他非 React 代码共存。</li></ol><hr><ol start="8"><li><strong>总结</strong></li></ol><ul><li>React 的事件机制是基于<strong>合成事件</strong>的，提供了跨浏览器兼容性和高效的事件处理。</li><li>事件通过<strong>事件委托</strong>绑定到根节点，减少了内存消耗和动态绑定的复杂性。</li><li>合成事件是池化的，事件对象会被复用，需要注意异步访问时调用 <code>event.persist()</code>。</li><li>React 17 将事件委托从 <code>document</code> 改为根容器，进一步优化了事件机制。</li></ul><p>希望这个解释能帮助你更好地理解 React 的事件机制！如果还有疑问，欢迎继续提问！</p><h2 id="说说对react-hooks的理解-解决了什么问题" tabindex="-1"><a class="header-anchor" href="#说说对react-hooks的理解-解决了什么问题"><span>说说对React Hooks的理解？解决了什么问题？</span></a></h2><p>解决函数组件原为无状态组件，成为内部可以进行维护自身状态</p><ul><li><p>useState</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意：</p><ol><li>initialState: 你希望 state 初始化的值。它可以是任何类型的值，但对于函数有特殊的行为。在初始渲染后，此参数将被忽略</li><li>严格模式下，React将两次调用初始化函数，</li><li>set函数仅更新下一次的渲染的状态变量。如果在调用set函数后读取状态变量。如果在调用 set 函数后读取状态变量，则 仍会得到在调用之前显示在屏幕上的旧值。如果你提供的新值与当前 state 相同（由 Object.is 比较确定），React 将 跳过重新渲染该组件及其子组件。React 会 批量处理状态更新。它会在所有 事件处理函数运行 并调用其 set 函数后更新屏幕。这可以防止在单个事件期间多次重新渲染。</li><li>flushSync 允许你强制 React 在提供的回调函数内同步刷新任何更新，这将确保 DOM 立即更新 React 会存储新状态，使用新值重新渲染组件，并更新 UI 调用 set 函数 不会 改变已经执行的代码中当前的 state （有一种异步的感觉） - <strong>解决办法</strong>： 你可以向 set函数中传递一个 更新函数，而不是下一个状态</li></ol><p>更新状态中的对象和数组 可以通过创建一个新对象来替换整个对象</p></li><li><p>useRef 引入一个不需要渲染的值</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> ref <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>initialValue：ref 对象的 current 属性的初始值。可以是任意类型的值。这个参数在首次渲染后被忽略。</p><blockquote><p>useRef返回一个对象，ref.current为initialValue. 改变 ref.current 属性时，React 不会重新渲染组件。 React 不知道它何时会发生改变，因为 ref 是一个普通的 JavaScript 对象。</p></blockquote><ol><li>使用 useRef 声明 ref。你可以在其中保存任何值，但最常用于保存 DOM 节点。</li><li>使用用 ref 引用一个值</li></ol><ul><li>可以在重新渲染之间 存储信息</li><li>可以在重新渲染之间 存储信息</li><li></li></ul><p>注意：改变ref不会触发渲染，</p></li><li><p>useEffect</p></li><li><p>useContext useContext, 可以让你读取和订阅组件中的context</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">  <span class="token function">useContext</span><span class="token punctuation">(</span>SomeContext<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>SomeContext：先前用 createContext 创建的 context。context 本身不包含信息，它只代表你可以提供或从组件中读取的信息类型。 <strong>用法：</strong></p><ul><li>向组件深处传递数据</li><li>通过context更新传递的数据</li></ul></li><li><p>useCallback</p></li><li><p>useReducer 在组件的顶层作用域调用 useReducer 以创建一个用于管理状态的 reducer。</p></li></ul><h2 id="state-和-props-有什么区别" tabindex="-1"><a class="header-anchor" href="#state-和-props-有什么区别"><span>state 和 props 有什么区别？</span></a></h2><ul><li>state state是用来保存组件状态、控制以及修改自己状态。 外部不可访问，可以说是组件私有属性</li><li>props 是传递给组件的（类似于函数的传参），只读不可改</li></ul><h2 id="组件中如何验证props" tabindex="-1"><a class="header-anchor" href="#组件中如何验证props"><span>组件中如何验证Props</span></a></h2><p>React为我们提供了PropTypes以供验证使用。如果使用typescript那么就可以直接用接口来定义。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> propTypes <span class="token keyword">from</span> <span class="token string">&#39;prop-types&#39;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">State</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            </span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">            <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">State<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> propTypes<span class="token punctuation">.</span>string</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> State<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="super-和-super-props-有什么区别-1" tabindex="-1"><a class="header-anchor" href="#super-和-super-props-有什么区别-1"><span>super() 和 super(props) 有什么区别？</span></a></h2><p>super()和super(props)都是调用父类构造函数的语句。</p><ul><li>super() 会调用父类的构造函数并将this绑定到子类的实例。如果子类的构造函数中 没有使用this,则可以省略super调用</li><li>super(props) 则是在子类的构造函数中调用父类的构造函数，并将props对象出传递给父类的构造函数。 props对象传递给父类的构造函数，以便在组件中使用this.props访问它。</li></ul><h2 id="说说-react中的setstate执行机制" tabindex="-1"><a class="header-anchor" href="#说说-react中的setstate执行机制"><span>说说 React中的setState执行机制</span></a></h2><p>类式组件中有setState机制</p><ul><li>组件中多次调用setState()，会进行合并，组件只执行一次更新操作</li><li>流程 1.将setState传入的partialState参数存储在当前组件实例的state暂存队列中。 2.判断当前React是否处于批量更新状态，如果是，将当前组件加入待更新的组件队列中。 3.如果未处于批量更新状态，将批量更新状态标识设置为true，用事务再次调用前一步方法，保证当前组件加入到了待更新组件队列中。 4.调用事务的waper方法，遍历待更新组件队列依次执行更新。 5.执行生命周期componentWillReceiveProps。 6.将组件的state暂存队列中的state进行合并，获得最终要更新的state对象，并将队列置为空。 7.执行生命周期componentShouldUpdate，根据返回值判断是否要继续更新。 8.执行生命周期componentWillUpdate。 9.执行真正的更新，render。 10.执行生命周期componentDidUpdate</li></ul><h2 id="setstate是同步还是异步" tabindex="-1"><a class="header-anchor" href="#setstate是同步还是异步"><span>setState是同步还是异步？</span></a></h2><p>在 React 中，<code>setState</code> 的行为既可以是<strong>异步</strong>的，也可以是<strong>同步</strong>的，具体取决于调用它的上下文。以下是对 <code>setState</code> 行为的详细解释：</p><hr><ol><li><strong><code>setState</code> 的异步行为</strong> 在大多数情况下，<code>setState</code> 是<strong>异步</strong>的。React 会将多个 <code>setState</code> 调用合并（批处理），然后一次性更新组件状态，以提高性能。</li></ol><p><strong>异步的原因</strong>：</p><ul><li><strong>性能优化</strong>：React 会将多个状态更新合并，减少不必要的重新渲染。</li><li><strong>一致性</strong>：确保在事件处理函数或生命周期方法中，状态更新是批处理的，避免中间状态导致的 UI 不一致。</li></ul><p><strong>示例</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">  state <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 0，因为 setState 是异步的</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Increment<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>console.log</code> 输出的仍然是旧的状态值，因为 <code>setState</code> 是异步的，状态更新还没有完成。</p><hr><ol start="2"><li><strong><code>setState</code> 的同步行为</strong> 在某些情况下，<code>setState</code> 会表现为<strong>同步</strong>更新。例如：</li></ol><ul><li>在 <strong><code>setTimeout</code>、<code>Promise</code>、原生事件</strong> 等异步代码中调用 <code>setState</code> 时，React 不会进行批处理，状态会立即更新。</li></ul><p><strong>示例</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">  state <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1，因为 setState 是同步的</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Increment<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>setState</code> 在 <code>setTimeout</code> 中调用，因此它是同步的，<code>console.log</code> 会输出更新后的状态值。</p><hr><ol start="3"><li><strong>如何获取更新后的状态？</strong> 由于 <code>setState</code> 是异步的，如果你需要在状态更新后执行某些操作，可以使用 <code>setState</code> 的第二个参数（回调函数）。</li></ol><p><strong>示例</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出更新后的状态值</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ol start="4"><li><strong>函数式 <code>setState</code></strong><code>setState</code> 还可以接受一个函数作为参数，这个函数会接收当前状态和 <code>props</code> 作为参数，并返回一个新的状态对象。这种方式可以避免直接依赖 <code>this.state</code>，尤其是在多次调用 <code>setState</code> 时。</li></ol><p><strong>示例</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prevState<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> prevState<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ol start="5"><li><strong>React 18 中的自动批处理</strong> 在 React 18 中，React 引入了<strong>自动批处理</strong>机制，即使在 <code>Promise</code>、<code>setTimeout</code> 等异步代码中，<code>setState</code> 也会被批处理。如果你希望在某些情况下禁用批处理，可以使用 <code>ReactDOM.flushSync</code>。</li></ol><p><strong>示例</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> flushSync <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">flushSync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出更新后的状态值</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ol start="6"><li><strong>总结</strong></li></ol><ul><li><strong>异步</strong>：在 React 事件处理函数和生命周期方法中，<code>setState</code> 是异步的，React 会进行批处理。</li><li><strong>同步</strong>：在 <code>setTimeout</code>、<code>Promise</code>、原生事件等异步代码中，<code>setState</code> 是同步的。</li><li><strong>获取更新后的状态</strong>：使用 <code>setState</code> 的第二个参数（回调函数）或函数式 <code>setState</code>。</li><li><strong>React 18</strong>：引入了自动批处理机制，进一步优化了状态更新的行为。</li></ul><p>setState一定会合并吗</p><p>其实不然，完全替换的时候，就不会合并。合并只是一种优化策略。</p>`,113)),s("h2",m,[s("a",g,[s("span",null,[t(l,{to:"/interview/React/%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6.html"},{default:r(()=>n[2]||(n[2]=[p("React 高阶组件")])),_:1})])])]),n[5]||(n[5]=a(`<h2 id="react-fiber是什么-有什么用" tabindex="-1"><a class="header-anchor" href="#react-fiber是什么-有什么用"><span>React fiber是什么？有什么用？</span></a></h2><p><strong>Fiber</strong></p><p>js引擎和页面渲染引擎是在同一个渲染线程之内，两者是互斥关系。 如果在某个阶段执行任务特别长，例如在定时器阶段或Begin Frame阶段执行时间非常长，时间已经明显超过了16ms，那么就会阻塞页面的渲染，从而出现卡顿现象。</p><blockquote><p>在 react16 引入 Fiber 架构之前，react 会采用递归对比虚拟DOM树，找出需要变动的节点，然后同步更新它们，这个过程 react 称为reconcilation（协调）。 在reconcilation期间，react 会一直占用浏览器资源，会导致用户触发的事件得不到响应。实现的原理如下所示：</p></blockquote><p><strong>Vue 是没有 Fiber</strong></p><p>Vue 是基于 template 和 watcher 的组件级更新，把每个更新任务分割得足够小，不需要使用到 Fiber 架构，将任务进行更细粒度的拆分 React 是不管在哪里调用 setState，都是从根节点开始更新的，更新任务还是很大，需要使用到 Fiber 将大任务分割为多个小任务，可以中断和恢复，不阻塞主进程执行高优先级的任务</p><p><strong>fiber是一种新的数据结构</strong></p><p>Fiber 可以理解为是一个执行单元，也可以理解为是一种数据结构</p><p>每执行一个执行单元, react就会检查还剩余多长时间， 如果没有将会把控制权让出去。</p><p><strong>fiber链表数据结构</strong></p><p>Fiber是链表数据结构，fiber tree 是单链表结构</p><p><strong>fiber执行原理</strong></p><p>从根节点开始渲染和调度的过程可以分为两个阶段：render 阶段、commit 阶段</p><ol><li>render 阶段 这个阶段是可中断的，找出所有节点的变更 <ol><li>React Fiber首先是将虚拟DOM树转化为Fiber tree，因此每个节点都有child、sibling、return属性</li><li></li></ol></li><li>commit 阶段 这个阶段是不可中断的，会执行所有的变更</li></ol><h2 id="react18和之前版本的区别" tabindex="-1"><a class="header-anchor" href="#react18和之前版本的区别"><span>React18和之前版本的区别</span></a></h2><h2 id="为什么说react中的props是只读的" tabindex="-1"><a class="header-anchor" href="#为什么说react中的props是只读的"><span>为什么说React中的props是只读的？</span></a></h2><p>React中props是单项数据流，父组件传进子组件的数据props改变后，子组件也会进行改变，但是子组件不可更改props的值，让变化变得难以预测</p><h2 id="面试题-你是怎么理解redux的" tabindex="-1"><a class="header-anchor" href="#面试题-你是怎么理解redux的"><span>面试题：你是怎么理解Redux的？</span></a></h2><p><strong>对Redux的理解</strong></p><p>Redux 是一个用于 JavaScript 应用的状态管理库，常用于 React 应用中。它的核心思想是将应用的状态集中管理，使状态的变化可预测且易于调试。Redux 特别适合处理复杂应用中的状态管理问题，尤其是当组件之间的状态共享和通信变得复杂时。</p><p><strong>Redux 的核心概念</strong></p><ol><li><strong>Store</strong>：存储应用状态的容器，整个应用只有一个 Store。</li><li><strong>State</strong>：应用的状态，存储在 Store 中，是一个普通的 JavaScript 对象。</li><li><strong>Action</strong>：描述状态变化的普通对象，通常包含一个 <code>type</code> 字段来指示动作类型，还可以包含其他数据。状态只能通过触发 Action 来改变</li><li><strong>Reducer</strong>：纯函数，接收当前状态和 Action，返回新的状态。Reducer 定义了状态如何响应 Action 进行变化。</li><li><strong>Dispatch</strong>：用于触发 Action 的方法，Store 通过 Dispatch 接收 Action 并更新状态。</li><li><strong>Subscribe</strong>：用于监听状态变化的方法，当状态变化时，订阅的回调函数会被调用。</li></ol><p><strong>Redux 的工作原理</strong></p><ol><li><strong>初始化</strong>：创建 Store 时，需要传入一个根 Reducer，Store 会调用 Reducer 获取初始状态。</li><li><strong>触发 Action</strong>：当用户交互或其他事件发生时，通过 <code>dispatch(action)</code> 触发一个 Action。</li><li><strong>处理 Action</strong>：Store 将当前的 State 和 Action 传递给 Reducer，Reducer 根据 Action 的类型和内容计算出新的 State。</li><li><strong>更新 State</strong>：Store 更新为新的 State，并通知所有订阅了状态变化的监听器。</li><li><strong>视图更新</strong>：监听器（通常是 React 组件）接收到状态变化后，重新渲染视图。</li></ol><p><strong>示例代码</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Action Types</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">INCREMENT</span> <span class="token operator">=</span> <span class="token string">&#39;INCREMENT&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">DECREMENT</span> <span class="token operator">=</span> <span class="token string">&#39;DECREMENT&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Actions</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">INCREMENT</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">decrement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">DECREMENT</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Reducer</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">counterReducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token constant">INCREMENT</span><span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token constant">DECREMENT</span><span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> state <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> state<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Store</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token operator">=</span> Redux<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>counterReducer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Subscribe</span></span>
<span class="line">store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Current state:&#39;</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Dispatch</span></span>
<span class="line">store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Current state: 1</span></span>
<span class="line">store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Current state: 2</span></span>
<span class="line">store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Current state: 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>优点</strong></p><ol><li><strong>单一数据源</strong>：整个应用的状态存储在一个 Store 中，便于管理和调试。</li><li><strong>状态只读</strong>：状态只能通过触发 Action 来改变，确保状态变化的可预测性。</li><li><strong>纯函数更新</strong>：Reducer 是纯函数，相同的输入总是得到相同的输出，便于测试和调试。</li></ol><p><strong>缺点</strong></p><ol><li><strong>样板代码多</strong>：Redux 需要编写大量的 Action 和 Reducer，增加了代码量。</li><li><strong>学习曲线陡峭</strong>：对于初学者来说，理解 Redux 的概念和工作原理可能需要一些时间。</li></ol><p><strong>总结</strong></p><p>Redux 通过集中管理应用状态，使状态变化可预测且易于调试。虽然它引入了额外的复杂性，但在处理复杂应用的状态管理时，Redux 提供了一种清晰和可维护的解决方案。</p><h2 id="super-和-super-props-有什么区别-2" tabindex="-1"><a class="header-anchor" href="#super-和-super-props-有什么区别-2"><span>super() 和 super(props) 有什么区别？</span></a></h2><blockquote><p>super 关键字实现调用父类，super 代替的是父类的构建函数，使用 super(name) 相当于调用 sup.prototype.constructor.call(this,name)</p></blockquote><p>类式组件中会有这种写法</p><h2 id="说说-react-生命周期有哪些不同阶段-每个阶段对应的方法是" tabindex="-1"><a class="header-anchor" href="#说说-react-生命周期有哪些不同阶段-每个阶段对应的方法是"><span>说说 React 生命周期有哪些不同阶段？每个阶段对应的方法是？</span></a></h2><p>React组件的生命周期分为三个阶段</p><ul><li>挂载阶段 <ul><li>constructor 实力过程中自动调用的方法，在方法内部通过super关键字获取来自父组件的props在该方法中，通常的操作 为初始化state状态或者在this上挂载方法。</li><li>getDerivedStateFromProps 静态方法 getDerivedStateFormProps()在调用render方法之前，在初始化和后续更新都会被调用。 该方法会返回一个对象来更新state,如果返回null则不更新任何内容。</li><li>render 类组件必须要实现的方法，用于渲染DOM结构，可以访问state与prop属性。</li><li>componentDidMount 组件挂载实例上之后，就是在render之后执行，用于一些数据获取、事件监听等操作。</li></ul></li><li>更新阶段 <ul><li>getDerivedStateFromProps 如上，该方法初始化和更新时都会调用。</li><li>shouldComponentUpdate shouldComponentUpdate() 在组件更新之前调用， 返回true时组件更新， 返回false则不更新</li><li>render 类组件必须要实现的方法，用于渲染DOM结构，可以访问state与prop属性。</li><li>getSnapshotBeforeUpdate 在最近一次的渲染输出被提交之前调用。在 render 之后，即将对组件进行挂载时调用。</li><li>componentDidUpdate 完成更新之后调用</li></ul></li><li>卸载阶段 <ul><li>componentWillUnmount 此方法用于组件卸载前，清理一些注册事件是监听事件</li></ul></li></ul><h2 id="说说对react-hooks的理解-解决了什么问题-1" tabindex="-1"><a class="header-anchor" href="#说说对react-hooks的理解-解决了什么问题-1"><span>说说对React Hooks的理解？解决了什么问题？</span></a></h2><ul><li>useEffect 让函数式组件可以处理副作用(与UI渲染无关的一切代码)，并且可以模拟 componentDidMount，componentDidUpdate、compentWillUnMount等生命周期 执行机制 <ul><li>触发时机：useEffect 的触发时机依赖于提供的依赖数组。如果依赖数组为空，那么 useEffect 将在每次渲染后执行。如果依赖数组包含变量，那么 useEffect 将在这些变量发生变化时执行。</li><li>执行顺序：在每次组件渲染后，React 会按照 useEffect 钩子的出现顺序来执行它们。如果某个 useEffect 依赖于另一个 useEffect 的输出，那么先执行依赖的 useEffect。</li><li>清理：当 useEffect 执行完毕后，React 会自动清理其副作用，比如取消订阅、清除定时器等。</li><li>错误处理：如果在 useEffect 的执行过程中抛出错误，React 会捕获这个错误并打印一条错误消息。</li><li>性能优化：React 会根据 useEffect 的依赖数组来决定是否需要重新执行。如果依赖数组中的变量没有发生变化，那么 React 不会重新执行 useEffect。这有助于减少不必要的操作，提高应用的性能。 <strong>注意点：尽管 useEffect 在每次组件渲染后都会执行，但 React 不会在每次渲染后都重新创建 useEffect 的回调函数。这意味着如果你在回调函数中使用了闭包，那么这些闭包会在整个组件生命周期内保持不变。因此，在回调函数中使用的所有变量都必须是状态的一部分或者是在组件中不变的。</strong></li></ul></li><li>useState 用于设置函数式组件的状态，在状态更新的时候(setXXX)会进行浅比较，当更新的状态值与当前状态值相同的则不会触发更新。</li><li>useRef 主要用于获取dom对象，获取子组件的实例，记录非状态数据用来持久化数据</li><li>useMemo 与vue中的computed相似，接受一个计算函数以及依赖项，只有当依赖项改变的时候才会重新执行计算函数，否则将用上次缓存的结果。</li><li>useReducer 类似Redux</li><li>useLayoutEffect useLayoutEffect与useEffect用法相似，主要区别是它是在渲染前(此时Dom已经根据VDom进行了修改，但是还没有渲染呈现到屏幕上)同步执行的</li><li>useCallback 用于在2次渲染间保存函数实例，防止多次渲染造成的函数重新创建，一般只在需要将函数作为 props 传递给子组件或将其作为依赖项传递给其他 Hook 时，才需要考虑使用 useCallback 进行优化</li></ul><h2 id="说说react-router有几种模式-实现原理" tabindex="-1"><a class="header-anchor" href="#说说react-router有几种模式-实现原理"><span>说说React Router有几种模式？实现原理？</span></a></h2><p>React Router 主要支持两种路由模式：</p><ul><li><strong>BrowserRouter</strong>（基于 HTML5 History API）</li><li><strong>HashRouter</strong>（基于 URL 的 hash 部分）</li></ul><p><strong>1. BrowserRouter</strong></p><ul><li><strong>特点</strong>：使用 HTML5 的 History API（<code>pushState</code>、<code>replaceState</code> 和 <code>popstate</code> 事件）来保持 UI 和 URL 的同步。</li><li><strong>URL 格式</strong>：<code>http://example.com/path</code></li><li><strong>优点</strong>：URL 更简洁，没有 <code>#</code> 符号，更符合现代 Web 应用的习惯。</li><li><strong>缺点</strong>：需要服务器配置支持，确保在直接访问或刷新页面时能正确返回应用入口文件。</li></ul><p><strong>2. HashRouter</strong></p><ul><li><strong>特点</strong>：使用 URL 的 hash 部分（即 <code>#</code> 后面的部分）来保持 UI 和 URL 的同步。</li><li><strong>URL 格式</strong>：<code>http://example.com/#/path</code></li><li><strong>优点</strong>：兼容性更好，不需要服务器额外配置，适合不支持 HTML5 History API 的旧浏览器。</li><li><strong>缺点</strong>：URL 中包含 <code>#</code>，不够美观，且 SEO 不友好。</li></ul><p><strong>实现原理</strong></p><p><strong>1. BrowserRouter 的实现原理</strong></p><ul><li><strong>History API</strong>：BrowserRouter 依赖于 HTML5 的 History API，通过 <code>pushState</code> 和 <code>replaceState</code> 方法来改变 URL，而不刷新页面。</li><li><strong>监听 URL 变化</strong>：通过监听 <code>popstate</code> 事件来响应浏览器的前进和后退操作。</li><li><strong>路由匹配</strong>：根据当前的 URL 路径，匹配对应的路由组件并渲染。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Switch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-router-dom&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>Router<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>Switch<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. HashRouter 的实现原理</strong></p><ul><li><strong>Hash 变化</strong>：HashRouter 使用 URL 的 hash 部分来模拟路由变化，通过 <code>window.location.hash</code> 来改变 URL 的 hash 部分。</li><li><strong>监听 hash 变化</strong>：通过监听 <code>hashchange</code> 事件来响应 URL 的 hash 变化。</li><li><strong>路由匹配</strong>：根据当前的 hash 值，匹配对应的路由组件并渲染。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> HashRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Switch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-router-dom&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>Router<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>Switch<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>对比</strong></p><table><thead><tr><th>特性</th><th>BrowserRouter</th><th>HashRouter</th></tr></thead><tbody><tr><td>URL 格式</td><td><code>http://example.com/path</code></td><td><code>http://example.com/#/path</code></td></tr><tr><td>依赖 API</td><td>HTML5 History API</td><td>URL hash</td></tr><tr><td>服务器配置</td><td>需要支持</td><td>不需要</td></tr><tr><td>兼容性</td><td>现代浏览器</td><td>所有浏览器</td></tr><tr><td>SEO</td><td>友好</td><td>不友好</td></tr><tr><td>使用场景</td><td>现代 Web 应用</td><td>旧版浏览器或简单应用</td></tr></tbody></table><p><strong>总结</strong></p><ul><li><strong>BrowserRouter</strong>：适合现代 Web 应用，URL 简洁，SEO 友好，但需要服务器支持。</li><li><strong>HashRouter</strong>：兼容性好，无需服务器配置，适合旧版浏览器或简单应用，但 URL 中包含 <code>#</code>，SEO 不友好。</li></ul><p>根据应用的需求和运行环境，可以选择合适的路由模式。</p><h2 id="fiber" tabindex="-1"><a class="header-anchor" href="#fiber"><span>Fiber</span></a></h2><p>js引擎和页面渲染引擎是在同一个渲染线程之内，两者是互斥关系。如果在某个阶段执行任务特别长，例如在定时器阶段或Begin Frame阶段执行时间非常长，时间已经明显超过了16ms，那么就会阻塞页面的渲染，从而出现卡顿现象。</p><blockquote><p>在 react16 引入 Fiber 架构之前，react 会采用递归对比虚拟DOM树，找出需要变动的节点，然后同步更新它们，这个过程 react 称为reconcilation（协调）。在reconcilation期间，react 会一直占用浏览器资源，会导致用户触发的事件得不到响应。实现的原理如下所示：</p></blockquote><h3 id="vue-是没有-fiber" tabindex="-1"><a class="header-anchor" href="#vue-是没有-fiber"><span>Vue 是没有 Fiber</span></a></h3><p>Vue 是基于 template 和 watcher 的组件级更新，把每个更新任务分割得足够小，不需要使用到 Fiber 架构，将任务进行更细粒度的拆分 React 是不管在哪里调用 setState，都是从根节点开始更新的，更新任务还是很大，需要使用到 Fiber 将大任务分割为多个小任务，可以中断和恢复，不阻塞主进程执行高优先级的任务</p><h3 id="fiber是一种新的数据结构" tabindex="-1"><a class="header-anchor" href="#fiber是一种新的数据结构"><span>fiber是一种新的数据结构</span></a></h3><p>Fiber 可以理解为是一个执行单元，也可以理解为是一种数据结构</p><p>每执行一个执行单元, react就会检查还剩余多长时间， 如果没有将会把控制权让出去。</p><p><strong>fiber链表数据结构</strong></p><p>Fiber是链表数据结构，fiber tree 是单链表结构</p><h3 id="fiber执行原理" tabindex="-1"><a class="header-anchor" href="#fiber执行原理"><span>fiber执行原理</span></a></h3><p>从根节点开始渲染和调度的过程可以分为两个阶段：render 阶段、commit 阶段</p><ol><li>render 阶段 这个阶段是可中断的，找出所有节点的变更 <ol><li>React Fiber首先是将虚拟DOM树转化为Fiber tree，因此每个节点都有child、sibling、return属性</li><li></li></ol></li><li>commit 阶段 这个阶段是不可中断的，会执行所有的变更</li></ol><h2 id="高阶组件-已发-李和贵" tabindex="-1"><a class="header-anchor" href="#高阶组件-已发-李和贵"><span>高阶组件（已发-李和贵）</span></a></h2><h3 id="高阶组件是什么" tabindex="-1"><a class="header-anchor" href="#高阶组件是什么"><span>高阶组件是什么？</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。</p><p><strong>高阶组件是参数为组件，返回值为新组件的函数</strong></p></div><p>在此期间，我们可以对该组件进行props处理，事件处理等工作</p><h3 id="认识高阶组件" tabindex="-1"><a class="header-anchor" href="#认识高阶组件"><span>认识高阶组件</span></a></h3><ol><li><p>复用逻辑</p><p>对组件进行加工处理，根据需求来定制专属化的HOC</p></li><li><p>强化props</p><p>劫持上一层传过来的props,混入新的props</p></li><li><p>赋能组件</p><p>HOC有一项独特的特性，就是可以给被HOC包裹的业务组件，提供一些拓展功能，比如说额外的生命周期，额外的事件，但是这种HOC，可能需要和业务组件紧密结合</p></li><li><p>控制渲染</p><p>劫持渲染是hoc一个特性，在wrapComponent包装组件中，可以对原来的组件，进行条件渲染，节流渲染，懒加载等功能</p></li></ol><p><strong>使用方式</strong></p><ul><li><p>装饰器模式</p></li><li><p>函数包裹</p></li></ul><p><strong>两种不同的高阶组件</strong></p><ul><li><p>正向的属性代理</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">  <span class="token keyword">function</span> <span class="token constant">HOC</span><span class="token punctuation">(</span><span class="token parameter">WrapComponent</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">Advance</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">      state<span class="token operator">=</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;loong&#39;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrapComponent  <span class="token punctuation">{</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token punctuation">}</span> <span class="token punctuation">{</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token punctuation">}</span>  <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来看一下上面这个例子，return 返回结果是父组件（代理组件）对子组件（业务组件）的一系列操作</p><p><strong>在 fiber tree上，先mounted组件，然后才是我们的业务组件</strong></p></li><li><p>反向的组件继承</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span> hello<span class="token punctuation">,</span>world  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token constant">HOC</span><span class="token punctuation">(</span><span class="token parameter">Component</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">wrapComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token constant">HOC</span><span class="token punctuation">(</span>Index<span class="token punctuation">)</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HOC采用继承的方式, 代理组件继承了业务组件的本身，我们在使用的时候直接实例化代理组件HOC即可</p></li></ul><h3 id="编写高阶组件" tabindex="-1"><a class="header-anchor" href="#编写高阶组件"><span>编写高阶组件</span></a></h3><p>很多文章对其有很多分类，我这里就按照我的理解去分类</p><ol><li><p>增强props 混入props 代理组件state状态会混入（上面有混入的例子）, 初次之外我们还可以进行控制state的更新</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">classHOC</span><span class="token punctuation">(</span><span class="token parameter">WrapComponent</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">class</span>  <span class="token class-name">Idex</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;alien&#39;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrapComponent <span class="token punctuation">{</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token punctuation">}</span>  <span class="token punctuation">{</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token punctuation">}</span> changeName<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeName</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span> value <span class="token punctuation">,</span>setValue <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">,</span>changeName <span class="token punctuation">}</span> <span class="token operator">=</span> props</span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>   hello<span class="token punctuation">,</span>world <span class="token punctuation">,</span> my name is <span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        改变name <span class="token operator">&lt;</span>input onChange<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>  <span class="token function">changeName</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">}</span>  <span class="token operator">&gt;</span>确定<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">classHOC</span><span class="token punctuation">(</span>Index<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看这个例子，代理组件中<code>changeName={this.changeName.bind(this)} </code>，绑定changeName方法。用来更新name属性（代理组件中，说实话让我想起来了闭包）。</p><p>题外话：上面的例子中changeName绑定的是一个函数，然后利用bind改变其this指向（返回值是一个函数），在Index组件使用的时候<code>&lt;button onClick={ ()=&gt; changeName(value) } &gt;确定&lt;/button&gt;</code> , 才可以正确更新到代理组建的state。如果不绑定就会找不到该方法。</p></li><li><p>控制渲染 代理组件通过处理可以控制子组件是否显示</p><p>可以通过变量控制，也可以通过其它方式。达到控制渲染的目的就可以了</p><p>我们来看一个优化的例子💨</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token constant">HOC</span> <span class="token punctuation">(</span><span class="token parameter">Component</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">renderWrapComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> <span class="token punctuation">{</span> num <span class="token punctuation">}</span> <span class="token operator">=</span> props</span>
<span class="line">            <span class="token keyword">const</span> RenderElement <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>  <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span>  <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token punctuation">,</span><span class="token punctuation">[</span> num <span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> RenderElement</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">当前组件是否渲染</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span>world<span class="token punctuation">,</span> my name is alien <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">const</span> IndexHoc <span class="token operator">=</span> <span class="token constant">HOC</span><span class="token punctuation">(</span>Index<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">[</span> num <span class="token punctuation">,</span>setNumber <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">[</span> num1 <span class="token punctuation">,</span>setNumber1 <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">[</span> num2 <span class="token punctuation">,</span>setNumber2 <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>IndexHoc  num<span class="token operator">=</span><span class="token punctuation">{</span> num <span class="token punctuation">}</span> num1<span class="token operator">=</span><span class="token punctuation">{</span>num1<span class="token punctuation">}</span> num2<span class="token operator">=</span><span class="token punctuation">{</span> num2 <span class="token punctuation">}</span>  <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setNumber</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">&gt;</span>num<span class="token operator">++</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setNumber1</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">&gt;</span>num1<span class="token operator">++</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setNumber2</span><span class="token punctuation">(</span>num2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">&gt;</span>num2<span class="token operator">++</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子应该很好理解，代理组件通过useMemo钩子来依据props传入的num,来决定是否更新子组件</p></li><li><p>劫持生命周期</p></li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token constant">HOC</span> <span class="token punctuation">(</span><span class="token parameter">Component</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> proDidMount <span class="token operator">=</span> <span class="token class-name">Component</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>componentDidMount </span>
<span class="line">  <span class="token class-name">Component</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">componentDidMount</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;劫持生命周期：componentDidMount&#39;</span><span class="token punctuation">)</span></span>
<span class="line">     <span class="token function">proDidMount</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">wrapComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span>  <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也是很好理解，代理组件保存子组建的生命周期函数，然后重新设置对应的生命周期函数</p><ol start="4"><li>事件处理</li></ol><p>我们来看分析下面这个例子💨</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">ClickHoc</span> <span class="token punctuation">(</span><span class="token parameter">Component</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span>  <span class="token keyword">function</span> <span class="token function">Wrap</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> dom <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">const</span> <span class="token function-variable function">handerClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;发生点击事件&#39;</span><span class="token punctuation">)</span> </span>
<span class="line">     dom<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span>handerClick<span class="token punctuation">)</span></span>
<span class="line">     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> dom<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span>handerClick<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span>  <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span>dom<span class="token punctuation">}</span> <span class="token operator">&gt;</span><span class="token operator">&lt;</span>Component  <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实就是代理组件上面加了一个click监听事件</p><ol start="5"><li><p>获取自定义组件ref</p><p>我们知道在自定义组件上面ref是无用的，我们可以使用代理组件包裹业务组件即可，<code>ref={dom}</code>在代理组件上，即可获取</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"> <span class="token keyword">return</span>  <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span>dom<span class="token punctuation">}</span> <span class="token operator">&gt;</span><span class="token operator">&lt;</span>Component  <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h3 id="高阶组件实践" tabindex="-1"><a class="header-anchor" href="#高阶组件实践"><span>高阶组件实践</span></a></h3><p>可以参卡<code>推荐文章</code>中的这一章节，写的很详细</p><h3 id="推荐文章" tabindex="-1"><a class="header-anchor" href="#推荐文章"><span>推荐文章</span></a></h3><p><a href="https://juejin.cn/post/6940422320427106335?searchId=20240314203945EF18D3514FDD63A655E1#heading-44" target="_blank" rel="noopener noreferrer">「react进阶」一文吃透React高阶组件(HOC)</a></p>`,96))])}const y=c(k,[["render",b],["__file","index.html.vue"]]),R=JSON.parse('{"path":"/interview/React/","title":"React面试题","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"谈谈你对React的理解","slug":"谈谈你对react的理解","link":"#谈谈你对react的理解","children":[]},{"level":2,"title":"JSX转成真实DOM的过程","slug":"jsx转成真实dom的过程","link":"#jsx转成真实dom的过程","children":[]},{"level":2,"title":"说说 Real DOM 和 Virtual DOM 的区别？优缺点？","slug":"说说-real-dom-和-virtual-dom-的区别-优缺点","link":"#说说-real-dom-和-virtual-dom-的区别-优缺点","children":[]},{"level":2,"title":"useRef和useState的区别","slug":"useref和usestate的区别","link":"#useref和usestate的区别","children":[]},{"level":2,"title":"说说对React中类组件和函数组件的理解？有什么区别？","slug":"说说对react中类组件和函数组件的理解-有什么区别","link":"#说说对react中类组件和函数组件的理解-有什么区别","children":[]},{"level":2,"title":"super() 和 super(props) 有什么区别？","slug":"super-和-super-props-有什么区别","link":"#super-和-super-props-有什么区别","children":[]},{"level":2,"title":"说说React的事件机制？","slug":"说说react的事件机制","link":"#说说react的事件机制","children":[]},{"level":2,"title":"说说对React Hooks的理解？解决了什么问题？","slug":"说说对react-hooks的理解-解决了什么问题","link":"#说说对react-hooks的理解-解决了什么问题","children":[]},{"level":2,"title":"state 和 props 有什么区别？","slug":"state-和-props-有什么区别","link":"#state-和-props-有什么区别","children":[]},{"level":2,"title":"组件中如何验证Props","slug":"组件中如何验证props","link":"#组件中如何验证props","children":[]},{"level":2,"title":"super() 和 super(props) 有什么区别？","slug":"super-和-super-props-有什么区别-1","link":"#super-和-super-props-有什么区别-1","children":[]},{"level":2,"title":"说说 React中的setState执行机制","slug":"说说-react中的setstate执行机制","link":"#说说-react中的setstate执行机制","children":[]},{"level":2,"title":"setState是同步还是异步？","slug":"setstate是同步还是异步","link":"#setstate是同步还是异步","children":[]},{"level":2,"title":"React 高阶组件","slug":"react-高阶组件","link":"#react-高阶组件","children":[]},{"level":2,"title":"React fiber是什么？有什么用？","slug":"react-fiber是什么-有什么用","link":"#react-fiber是什么-有什么用","children":[]},{"level":2,"title":"React18和之前版本的区别","slug":"react18和之前版本的区别","link":"#react18和之前版本的区别","children":[]},{"level":2,"title":"为什么说React中的props是只读的？","slug":"为什么说react中的props是只读的","link":"#为什么说react中的props是只读的","children":[]},{"level":2,"title":"面试题：你是怎么理解Redux的？","slug":"面试题-你是怎么理解redux的","link":"#面试题-你是怎么理解redux的","children":[]},{"level":2,"title":"super() 和 super(props) 有什么区别？","slug":"super-和-super-props-有什么区别-2","link":"#super-和-super-props-有什么区别-2","children":[]},{"level":2,"title":"说说 React 生命周期有哪些不同阶段？每个阶段对应的方法是？","slug":"说说-react-生命周期有哪些不同阶段-每个阶段对应的方法是","link":"#说说-react-生命周期有哪些不同阶段-每个阶段对应的方法是","children":[]},{"level":2,"title":"说说对React Hooks的理解？解决了什么问题？","slug":"说说对react-hooks的理解-解决了什么问题-1","link":"#说说对react-hooks的理解-解决了什么问题-1","children":[]},{"level":2,"title":"说说React Router有几种模式？实现原理？","slug":"说说react-router有几种模式-实现原理","link":"#说说react-router有几种模式-实现原理","children":[]},{"level":2,"title":"Fiber","slug":"fiber","link":"#fiber","children":[{"level":3,"title":"Vue 是没有 Fiber","slug":"vue-是没有-fiber","link":"#vue-是没有-fiber","children":[]},{"level":3,"title":"fiber是一种新的数据结构","slug":"fiber是一种新的数据结构","link":"#fiber是一种新的数据结构","children":[]},{"level":3,"title":"fiber执行原理","slug":"fiber执行原理","link":"#fiber执行原理","children":[]}]},{"level":2,"title":"高阶组件（已发-李和贵）","slug":"高阶组件-已发-李和贵","link":"#高阶组件-已发-李和贵","children":[{"level":3,"title":"高阶组件是什么？","slug":"高阶组件是什么","link":"#高阶组件是什么","children":[]},{"level":3,"title":"认识高阶组件","slug":"认识高阶组件","link":"#认识高阶组件","children":[]},{"level":3,"title":"编写高阶组件","slug":"编写高阶组件","link":"#编写高阶组件","children":[]},{"level":3,"title":"高阶组件实践","slug":"高阶组件实践","link":"#高阶组件实践","children":[]},{"level":3,"title":"推荐文章","slug":"推荐文章","link":"#推荐文章","children":[]}]}],"git":{"updatedTime":1740478129000,"contributors":[{"name":"LiHegui","username":"LiHegui","email":"1487647822@qq.com","commits":7,"url":"https://github.com/LiHegui"}]},"filePathRelative":"interview/React/index.md"}');export{y as comp,R as data};
