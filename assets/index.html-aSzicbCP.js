import{_ as n,e as a,f as e,o as p}from"./app-BeRZjn83.js";const t={};function l(i,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="typescript面试题" tabindex="-1"><a class="header-anchor" href="#typescript面试题"><span>TypeScript面试题</span></a></h1><h2 id="说说你对-typescript-的理解-与-javascript-的区别" tabindex="-1"><a class="header-anchor" href="#说说你对-typescript-的理解-与-javascript-的区别"><span>说说你对 TypeScript 的理解？与 JavaScript 的区别？</span></a></h2><p>TypeScript 是 JavaScript 的类型的超集，支持ES6语法，支持面向对象编程的概念，如类、接口、继承、泛型等。</p><p>其是一种静态类型检查的语言，提供了类型注解，在代码编译阶段就可以检查出来数据类型的错误。</p><p><strong>特性：</strong></p><ol><li>类型批注和编译时类型检查 ：在编译时批注变量类型</li><li>类型推断：ts 中没有批注变量类型会自动推断变量的类型</li><li>类型擦除：在编译过程中批注的内容和接口会在运行时利用工具擦除 <span style="color:red;">(在 TypeScript 中，类型擦除指的是在编译过程中，类型批注和接口等类型信息会被移除，不会出现在生成的 JavaScript 代码中。这是因为 JavaScript 是动态类型语言，运行时不需要这些类型信息)</span></li><li>接口：ts 中用接口来定义对象类型</li><li>枚举：用于取值被限定在一定范围内的场景</li><li>Mixin：可以接受任意类型的值</li><li>泛型编程：写代码时使用一些以后才指定的类型</li><li>名字空间：名字只在该区域内有效，其他区域可重复使用该名字而不冲突</li><li>元组：元组合并了不同类型的对象，相当于一个可以装不同类型数据的数组</li></ol><h2 id="说说-typescript-的数据类型有哪些" tabindex="-1"><a class="header-anchor" href="#说说-typescript-的数据类型有哪些"><span>说说 typescript 的数据类型有哪些？</span></a></h2><p>除JavaScript类型之外</p><ul><li>枚举</li><li>void</li><li>never</li><li>元组tuple 允许一个已知的数据<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">  <span class="token keyword">let</span> <span class="token literal-property property">tupleArr</span><span class="token operator">:</span><span class="token punctuation">[</span>number<span class="token punctuation">,</span> string<span class="token punctuation">,</span> boolean<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  tupleArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&#39;34&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//ok</span></span>
<span class="line">  typleArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&#39;34&#39;</span><span class="token punctuation">]</span> <span class="token comment">// no ok</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol><li><p>boolean</p></li><li><p>number</p></li><li><p>string</p></li><li><p>array</p></li><li><p>tuple</p></li><li><p>enum</p></li><li><p>any</p></li><li><p>null</p></li><li><p>void</p></li><li><p>never</p></li><li><p>object</p></li></ol><h2 id="说说你对-typescript-中枚举类型的理解-应用场景" tabindex="-1"><a class="header-anchor" href="#说说你对-typescript-中枚举类型的理解-应用场景"><span>说说你对 TypeScript 中枚举类型的理解？应用场景？</span></a></h2><h2 id="说说你对-typescript-中接口的理解-应用场景" tabindex="-1"><a class="header-anchor" href="#说说你对-typescript-中接口的理解-应用场景"><span>说说你对 TypeScript 中接口的理解？应用场景</span></a></h2><p>接口是一系列抽象方法的声明，这些方法都是抽象的，需要具体的类去实现。</p><p>简单来讲，一个接口所描述的是一个对象相关的属性和方法，但并不提供具体创建此对象实例的方法</p><p>定义一个对象，属性及其方法，只负责描述，不负责具体实现</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">readonly</span> gender<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span>propsName<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口继承 extends 继承多个，逗号隔开</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">color</span><span class="token operator">:</span> String</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Mother</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">height</span><span class="token operator">:</span> Number</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">,</span>Mother<span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> string</span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> Number</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="说说你对-typescript-中类的理解-应用场景" tabindex="-1"><a class="header-anchor" href="#说说你对-typescript-中类的理解-应用场景"><span>说说你对 TypeScript 中类的理解？应用场景？</span></a></h2><ul><li>字段 ： 字段是类里面声明的变量。字段表示对象的有关数据。 <strong>直接声明和在构造函数里面声明变量的区别</strong> 初始化时机：直接写属性的值在类定义时就会初始化，而构造函数中写属性的值将在每次创建类的实例时初始化。 共享性：直接写属性的值在所有实例之间共享，而构造函数中写属性的值是每个实例独立的。 访问权限：直接写属性的值是公共的，可以从实例或类的任何地方访问。而构造函数中写属性的值可以使用 this 关键字限定为实例的私有属性。</li><li>构造函数： 类实例化时调用，可以为类的对象分配内存。</li><li>方法： 方法为对象要执行的操作</li><li>关键字 <ul><li>public: 公共成员可以从类的任何位置访问，包括类的外部。</li><li>private: 私有成员只能从类的内部访问，不能从类的外部直接访问。</li><li>protected: 保护成员可以从类的内部和派生自该类的子类中访问。</li><li>static 静态属性</li><li>readOnly 只读</li></ul></li></ul><p>类之间可以继承，可以实现接口<code>interface</code></p><h2 id="说说你对-typescript-中泛型的理解-应用场景" tabindex="-1"><a class="header-anchor" href="#说说你对-typescript-中泛型的理解-应用场景"><span>说说你对 TypeScript 中泛型的理解？应用场景？</span></a></h2><p>泛型程序设计是程序设计语言的一种风格和范式</p><p>泛型允许我们在强类型程序设计语言中编写代码时使用一些以后才指定的类型</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">returnItem</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>para<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> para</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复用性很高</p><ul><li>泛型约束 <ul><li>多类型（继承接口interface）</li></ul></li></ul><h2 id="keyof如何使用" tabindex="-1"><a class="header-anchor" href="#keyof如何使用"><span><code>keyof</code>如何使用？</span></a></h2><p>首先<code>keyof</code>是用来获取一个类型的所有键的联合类型</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token builtin">string</span>；</span>
<span class="line">    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">    gender<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PerosonType</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Perosn<span class="token punctuation">;</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的PerosonType相当于 &quot;name&quot;|&quot;age&quot;|&quot;gender&quot;</p><p>keyof操作符常用于获取类型中的属性名，例如可以使用它来获取对象的属性值：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getProperty</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">getProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等同于 person.name</span></span>
<span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">getProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等同于 person.age</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的keyof T为 &#39;name&#39;|&#39;age&#39;|&#39;gender&#39;,保证了属性必须是其中的一中，也就是只能是这三个值 在编程中，Interface 和 Type 都是用来定义和描述数据结构的。但是它们的用法和语法有所不同。</p><h2 id="interface和type的区别" tabindex="-1"><a class="header-anchor" href="#interface和type的区别"><span>Interface和type的区别</span></a></h2><p>Interface 是一种抽象的数据类型，它定义了一组方法和属性的契约，以描述一个对象应该具有的行为。在 TypeScript 中，Interface 可以用来描述对象的形状，或者是类的实现。Interface 声明了对象应该具有哪些方法和属性，但并不提供具体的实现代码。</p><p>Type 是一个类型别名，它是对某个类型的另一个名称。Type 可以用来定义基本类型、联合类型、元组类型、对象类型等等。Type 可以为类型命名，这样可以提高代码的可读性和可维护性。Type 可以将一个复杂的类型定义为一个简单易懂的名称，从而简化代码。</p><p>在 TypeScript 中，Interface 和 Type 有许多相似之处，但是也有一些区别。Interface 可以被扩展，而 Type 不能。Interface 可以描述某个类的实现，而 Type 不能。Type 可以定义联合类型和交叉类型，而 Interface 不能。因此，在使用时需要根据具体的情况选择合适的方式来定义数据结构。</p><h2 id="ts装饰器" tabindex="-1"><a class="header-anchor" href="#ts装饰器"><span>ts装饰器</span></a></h2><p>TypeScript装饰器是一种特殊类型的声明，可以用来给类、方法、属性等元素添加额外的元数据。装饰器以@符号开始，后面跟着一个装饰器工厂函数。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">MyDecorator</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;MyDecorator was called&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">MyDecorator</span></span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 类定义</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类的装饰器可以装饰：</p><ul><li><p>类</p></li><li><p>方法/属性</p></li><li><p>参数</p></li><li><p>访问器</p></li></ul><h2 id="命名空间" tabindex="-1"><a class="header-anchor" href="#命名空间"><span>命名空间</span></a></h2>`,44)]))}const o=n(t,[["render",l],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/interview/Ts/","title":"TypeScript面试题","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"说说你对 TypeScript 的理解？与 JavaScript 的区别？","slug":"说说你对-typescript-的理解-与-javascript-的区别","link":"#说说你对-typescript-的理解-与-javascript-的区别","children":[]},{"level":2,"title":"说说 typescript 的数据类型有哪些？","slug":"说说-typescript-的数据类型有哪些","link":"#说说-typescript-的数据类型有哪些","children":[]},{"level":2,"title":"说说你对 TypeScript 中枚举类型的理解？应用场景？","slug":"说说你对-typescript-中枚举类型的理解-应用场景","link":"#说说你对-typescript-中枚举类型的理解-应用场景","children":[]},{"level":2,"title":"说说你对 TypeScript 中接口的理解？应用场景","slug":"说说你对-typescript-中接口的理解-应用场景","link":"#说说你对-typescript-中接口的理解-应用场景","children":[]},{"level":2,"title":"说说你对 TypeScript 中类的理解？应用场景？","slug":"说说你对-typescript-中类的理解-应用场景","link":"#说说你对-typescript-中类的理解-应用场景","children":[]},{"level":2,"title":"说说你对 TypeScript 中泛型的理解？应用场景？","slug":"说说你对-typescript-中泛型的理解-应用场景","link":"#说说你对-typescript-中泛型的理解-应用场景","children":[]},{"level":2,"title":"keyof如何使用？","slug":"keyof如何使用","link":"#keyof如何使用","children":[]},{"level":2,"title":"Interface和type的区别","slug":"interface和type的区别","link":"#interface和type的区别","children":[]},{"level":2,"title":"ts装饰器","slug":"ts装饰器","link":"#ts装饰器","children":[]},{"level":2,"title":"命名空间","slug":"命名空间","link":"#命名空间","children":[]}],"git":{"updatedTime":1740328619000,"contributors":[{"name":"LiHegui","username":"LiHegui","email":"1487647822@qq.com","commits":2,"url":"https://github.com/LiHegui"}]},"filePathRelative":"interview/Ts/index.md"}');export{o as comp,r as data};
