import{_ as c,e as o,f as t,h as p,g as n,i as l,r as i,o as u,j as s}from"./app-BeRZjn83.js";const r={};function k(d,a){const e=i("CodeDemo");return u(),o("div",null,[a[3]||(a[3]=t(`<h1 id="es6面试题" tabindex="-1"><a class="header-anchor" href="#es6面试题"><span>ES6面试题</span></a></h1><h2 id="什么是async-await" tabindex="-1"><a class="header-anchor" href="#什么是async-await"><span><span style="color:red;">什么是async await?</span></span></a></h2><ul><li><p>async await是一种用于简化JavaScript中异步编程的语法。<span style="color:red;">是基于Promise的语法糖</span>，提供了一种更方便、更易理解的方式来处理异步操作。</p></li><li><p><span style="color:red;">async是一个放在函数声明前的关键字，表示该函数是一个异步函数。这个函数总是返回一个Promise。如果函数内部返回了一个非Promise值，async函数会自动把这个值用Promise.resolve()封装成一个解决（resolved）状态的Promise。</span></p></li><li><p><span style="color:red;">async/await能够使用传统的try/catch结构来捕获异常</span>，这使得异步代码的错误处理更加直观和方便。</p></li></ul><h3 id="一次性发送多个请求-保证他们的顺序" tabindex="-1"><a class="header-anchor" href="#一次性发送多个请求-保证他们的顺序"><span>一次性发送多个请求，保证他们的顺序？</span></a></h3><ul><li>可以通过使用async/await在for循环中按序发送请求，并确保每个请求完成后再发送下一个请求。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">sendRequestsSequentially</span><span class="token punctuation">(</span><span class="token parameter">urls</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> url <span class="token keyword">of</span> urls<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 请求将会按urls数组中的顺序依次进行</span></span>
<span class="line">        <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 假设服务器返回的是JSON数据</span></span>
<span class="line">        results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 按相应顺序保存数据</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> results<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法虽然可以确保顺序，但是请求并不是并发的，后一个请求必须等待前一个请求完成，因此性能可能会受到影响。</p><ul><li>使用Promise.all维持并发，并确保顺序:如果希望并发发送请求但还想保持结果的顺序，可以使用Promise.all。这个方法接收一个Promise数组，并且只有当所有Promise都解决后，它才会解决，解决的顺序与数组中的Promise顺序相同。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">sendRequestsConcurrently</span><span class="token punctuation">(</span><span class="token parameter">urls</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 创建一个Promise数组，但由于我们不await这些调用，它们会并发执行</span></span>
<span class="line">    <span class="token keyword">const</span> promises <span class="token operator">=</span> urls<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">url</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 使用Promise.all按照请求顺序等待所有异步操作完成</span></span>
<span class="line">    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用Promise.all的好处是，所有请求几乎同一时间发送，从而充分利用了网络及服务器资源，提高了效率。<br> 如果其中一个请求失败了，使用Promise.all会导致全部Promise被拒绝。如果你需要保证即使个别请求失败了，也要保证其他请求的数据被处理，可以考虑Promise.allSettled方法。<br> 最后可以简单提一下Promise.allSettled的特性，表明对不同Promise处理方式的深入了解。</p><h3 id="async-await的实现原理" tabindex="-1"><a class="header-anchor" href="#async-await的实现原理"><span>async await的实现原理</span></a></h3><p>通过生成器<code>Generator</code>和 <code>Promise</code> 的结合，模拟了 <code>async/await</code> 的行为。它的核心思想是利用生成器的暂停和恢复机制，结合 <code>Promise</code> 的异步处理能力，实现类似 await 的功能。这种模拟虽然不如原生 <code>async/await</code> 高效，但它很好地展示了 <code>async/await</code> 的工作原理。</p>`,12)),p(e,{id:"code-demo-54",type:"normal",code:"eJx1Uk1Lw0AQ/StDTxuRiuJJiMde9Sr0UpJpG4mzstmopeQiohehhSJe6sfBkydPXqz+Gtviyb/g7G6SJqIhhOzOe/vem51h4zBp7DS6KQU6kgTHgtIjD4ZtAlCoU0Wwr+RRlGBTYSLjEzQAWIMtr01ZmwriGvSQUHW0VCKnB5ISDSedOMVN8GEQYRzy+ZtMrBW3KkWHtohc3UFqWtCPen1UeypE1SJRCreobpyN+Ltup9wjPC0CCZEnWufiIQa6CgeIUZtMbK4iIKw182xswNfkYz4bzZ8uluNLG6CouXChPLCpfDCxPH+3PNohZIzNWPZscVUxsuxrtaHVoEI0QRLnqUl4pn+xs6Cjg75ApbwaydBMRFupwOuONAxtu9dDSZixSs0IJzb74Ps+m0oR5lfvi5uX5dtkcffwPbvOu2nW99MVLeoKQ6v7yW+jGCmrWvWFcYI1Aosvps+llmu6Gw6zHF8vbl8/Z4/z0XmVZetN3UcSxR3kt2KX2V+tKH8KZA5yYK7y65rVSQYUtMyE/DOQnuGy85RC7EaEPCC84mHm73abGtkPpYcuIw=="},{default:l(()=>a[0]||(a[0]=[n("div",{class:"language-javascript line-numbers-mode","data-highlighter":"prismjs","data-ext":"js","data-title":"js"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"p"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"num"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"return"),s(" Promise"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"resolve"),n("span",{class:"token punctuation"},"("),s("num "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"function"),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token function"},"generator"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"const"),s(" value1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"yield"),s(),n("span",{class:"token function"},"p"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"const"),s(" value2 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"yield"),s(),n("span",{class:"token function"},"p"),n("span",{class:"token punctuation"},"("),s("value1"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"return"),s(" value2")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"higherOrderFn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"generatorFn"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Promise"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("resolve"),n("span",{class:"token punctuation"},","),s(" reject")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("      "),n("span",{class:"token keyword"},"let"),s(" gen "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"generatorFn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("      "),n("span",{class:"token comment"},"// 链式处理yield")]),s(`
`),n("span",{class:"line"},[s("      "),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"doYield"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"=>"),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("val"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"let"),s(" res")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"try"),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("          res "),n("span",{class:"token operator"},"="),s(" gen"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),s("val"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token keyword"},"catch"),n("span",{class:"token punctuation"},"("),s("err"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token function"},"reject"),n("span",{class:"token punctuation"},"("),s("err"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s("value"),n("span",{class:"token punctuation"},","),s("done"),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(" res")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// done === true 函数结束，resolve结果")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("done"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("          "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"resolve"),n("span",{class:"token punctuation"},"("),s("value"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token keyword"},"else"),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("          "),n("span",{class:"token comment"},"// 未结束，处理 value，同时传参")]),s(`
`),n("span",{class:"line"},[s("          value"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"then"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"=>"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token function"},"doYield"),n("span",{class:"token punctuation"},"("),s("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("      "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("      "),n("span",{class:"token function"},"doYield"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(" asyncFn "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"higherOrderFn"),n("span",{class:"token punctuation"},"("),s("generator"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// undefined")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// 2")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// 4")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[4]||(a[4]=t(`<h3 id="推荐文章" tabindex="-1"><a class="header-anchor" href="#推荐文章"><span>推荐文章</span></a></h3><p><a href="https://juejin.cn/post/7288963802649608250?searchId=20250224095329E728068825CAB4E955B4" target="_blank" rel="noopener noreferrer">详解 async/await —— 从入门到实现原理</a></p><p>如果函数内部返回了一个非Promise值，async函数会自动把这个值用Promise.resolve()封装成一个解决（resolved）状态的Promise。</p><h2 id="你知道generator吗" tabindex="-1"><a class="header-anchor" href="#你知道generator吗"><span><span style="color:red;">你知道<code>Generator</code>吗？</span></span></a></h2><p>Generator 函数返回一个迭代器对象（也称为 Generator 对象）。这个迭代器对象可以用于逐步执行 Generator 函数内部的代码</p><h2 id="set-和-map" tabindex="-1"><a class="header-anchor" href="#set-和-map"><span>Set 和 Map</span></a></h2><ul><li>Set Set是一种叫做集合的数据结构。特点是里面是无序且不重复（可以利用这个进行简单去重）。 里面的[value，value]结构 <ul><li>add 添加元素，返回set结构本身</li><li>delete 删除元素，返回布尔值</li><li>has 判断是否有该元素，返回一个布尔值</li><li>clear 清空</li></ul></li><li>Map Map是一种叫做字典的数据结构。里面是[key，value]结构。里面的key是不重复的。 <ul><li>size属性</li><li>set set(key,value)</li><li>get</li><li>has</li><li>delete</li><li>clear</li></ul></li></ul><h3 id="遍历map和set" tabindex="-1"><a class="header-anchor" href="#遍历map和set"><span>遍历Map和Set</span></a></h3><p>都可以使用迭代器（Iterator）来遍历Set和Map数据结构。 可以使用for of 或者 forEach(value,key)</p><h3 id="如何实现一个set" tabindex="-1"><a class="header-anchor" href="#如何实现一个set"><span>如何实现一个Set</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Set</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">delete</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何实现一个map" tabindex="-1"><a class="header-anchor" href="#如何实现一个map"><span>如何实现一个Map</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 利用对象来模拟Map</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">myMap</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">temp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;key1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;key2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;key1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="weakset-和-weakmap" tabindex="-1"><a class="header-anchor" href="#weakset-和-weakmap"><span>WeakSet 和 WeakMap</span></a></h3><ul><li>WeakSet WeakSet可以接受一个具有 Iterable接口的对象作为参数 WeakSet是一种特殊的Set，它只能存储对象类型的值，并且这些对象必须是弱引用。弱引用意味着，如果一个对象没有被其他地方引用，那么它可能会被垃圾回收机制回收。WeakSet中的对象也可能会被回收，因为WeakSet不会阻止垃圾回收机制回收WeakSet中的对象。 WeakSet没有size属性，也没有forEach、keys、values等迭代器方法。因为WeakSet中的对象可能会被回收，所以无法遍历WeakSet中的对象。 WeakSet只有add、delete和has方法。</li><li>WeakMap WeakMap是一种特殊的Map，它的键必须是对象类型的值，并且这些对象必须是弱引用。WeakMap中的键值对也可能会被回收，因为WeakMap不会阻止垃圾回收机制回收WeakMap中的键值对。 WeakMap没有size属性，也没有forEach、keys、values等迭代器方法。因为WeakMap中的键值对可能会被回收，所以无法遍历WeakMap中的键值对。 WeakMap只有set、get、delete和has方法，这些方法与Map的相应方法相似。</li></ul><h2 id="你是怎么理解es6中module的-使用场景" tabindex="-1"><a class="header-anchor" href="#你是怎么理解es6中module的-使用场景"><span>你是怎么理解ES6中Module的？使用场景？</span></a></h2><p>Module就是模块，是能够单独命名且独立完成一定功能的程序语言的集合。</p><ul><li>AMD 异步模块，采用异步的方式加载模块。所有的依赖模块的语句，都定义在一个回调函数中，等到模块加载完成之后 这个回调函数才能执行。 代表库require.js</li><li>CommonJS CommonJS是一套JavaScript模块规范，用于服务端。 <ul><li>模块是同步加载的，即只有加载完成，才能执行后面的操作</li><li>模块在首次执行后就会缓存，再次加载只返回缓存结果，如果想要再次执行，可清除缓存</li><li>require返回的值是被输出的值的拷贝，模块内部的变化也不会影响这个值</li><li>所有代码都运行在模块作用域，不会污染全局作用域</li></ul></li><li>ES6 export 用于规定模块的外接接口。 import 用于输入其它模块提供的功能。 CommonJS和AMD都是在运行时才能确定需要加载什么，而ES6设计思想是静态化，想在编译阶段就确定模块的依赖关系，以及输入输出的变量。而且是按需加载，只加载所需要的。</li></ul><h3 id="es6的module使用" tabindex="-1"><a class="header-anchor" href="#es6的module使用"><span>ES6的module使用</span></a></h3><h2 id="详细解释一下promise" tabindex="-1"><a class="header-anchor" href="#详细解释一下promise"><span>详细解释一下Promise？</span></a></h2><p>Promise是解决异步的一种方式，传统的如果异步之间存在依赖，形成嵌套。如果很多层的话，就会形成回调地狱。 Promise把这种改变成了链式调用，增加可维护性和可读性。 Promise存在三种状态fulfilled rejected pedding,状态不可逆</p><ul><li>Promise方法 <ul><li>reslove pedding=&gt;fulfilled 返回一个以给定值解析后的 Promise 对象。如果传入的是一个 Promise 对象，则直接返回该对象。如果传入的是一个 thenable 对象（即具有 then 方法的对象），则将其转换为 Promise 对象并解析。</li><li>reject pedding=&gt;rejected 返回一个以给定原因（错误信息）拒绝的 Promise 对象。</li><li>then 添加回调函数，用于处理 Promise 对象的状态变化。第一个参数是状态变为 resolved 时的回调函数，第二个参数是状态变为 rejected 时的回调函数。 then 方法返回一个新的 Promise 对象，可以链式调用</li><li>catch 添加一个错误处理的回调函数，用于处理 Promise 对象状态变为 rejected 时的错误信息。catch 方法返回一个新的 Promise 对象，可以链式调用</li><li>All 接收一个可迭代对象，返回一个 Promise 对象，该 Promise 对象在所有 Promise 对象都成功解析后才会解析。如果其中任何一个 Promise 对象被拒绝，则整个 Promise 对象都会被拒绝。返回的 Promise 对象的结果是一个数组，数组中的元素按照传入的顺序排列。</li><li>race 接收一个可迭代对象，返回一个 Promise 对象，该 Promise 对象在可迭代对象中的任何一个 Promise 对象解析或拒绝时立即解析或拒绝。返回的 Promise 对象的结果是第一个解析或拒绝的 Promise 对象的结果。</li><li>finally 添加一个 finally 处理函数，无论 Promise 对象的状态如何都会被调用。finally 方法返回一个新的 Promise 对象，可以链式调用。</li></ul></li></ul><h3 id="代码实现promise" tabindex="-1"><a class="header-anchor" href="#代码实现promise"><span>代码实现Promise</span></a></h3><p>详细见Promise文件</p>`,24)),p(e,{id:"code-demo-274",type:"normal",code:"eJzVVd1KG0EUfpUhN5lAiPct8UaTYgki0l41vdjuzpq162zY2bUVCcT+2EaiSFEQqymBqlBqTKE/aal5mswmveordGZnN9lsNmkt3jgEdjbnnO+c+c53ZtdjyyR2KzY1Bejps87lPm3UujvNTqvcaX1YMI0VjaA8ZtZOq9I92+5ufXXKG3ksG5hYYCEzPzs3fwekQdzbxm/7tuz9XHYul8vMcmv/ZWBfzNzNzNwTZn/vWnWJELCy5uUG63kM2HKDTFu2DBOip0i22SbhG/myChpJEUuybMIgvXIY3pB9VdJtxMw2VpCqYaSEHUwkEQOP8eAcnR84e23n9S7detc9fEHf1nrN5yEMAy8iYuirSJmRdP2RJD/mFT14GIVE33/qfT6ZhLSMZGsCko4sYIp0zATdAyZAejpIDV+aCuAQRek+SUM0RtPZ718gcySx7jPCiQuofex8rNPmJr34Tn/s8TO/unT2m07lrFevjsGN4DKlGmZGkgtQZX2aBiqGiUQoY2nwGtgKqjifnCnR6eunytfyOKb6ChOba+YqpJb/5soy18JH9aeOMed2JOmRmQgAAFmy5AKAyDRD48mX8PeMI2m9h1VAGBo4a+uqputISYLBuYYQo9rU1+lI7gCiiBKTMlTFZGy/sRHQfn0ixlPWFaDHqUtcyk7tqCguQ6YDcQE7BxegiLCi4aXfP6u/jsq90w2mluApAX1TDZQGhIDErdP78s05PmGR3fMKbb8UmN16gzYO6e4O+59ubl9FgmNHtWiTAoRRQ/ZPPXHJ44K94bSEp/JvtETqKTy3kRPEfuLz6lHD7hmMngDvYwpHZjdQgmeCcfF1i/OEpUTKnUfhARXJksJV83SGjlK6sQTjxJZlREg8CVxXr6ykF84Gf2K0Kmm6wmK5X/9EbBcr/QEAHAu8"},{default:l(()=>a[1]||(a[1]=[n("div",{class:"language-javascript line-numbers-mode","data-highlighter":"prismjs","data-ext":"js","data-title":"js"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// 如何实现一个Promise")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// 三种状态")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token constant"},"PENDING"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'PENDING'"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token constant"},"FULFILLED"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'FULFILLED'"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token constant"},"REJECTED"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'REJECTED'"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"myPromise"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"executor"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("status "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"PENDING"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("value "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"undefined"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("reason "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"undefined"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// 存放成功的回调")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("onResolvedCallbacks "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// 存放失败的回调")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("onRejectedCallbacks "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token function-variable function"},"resolve"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"value"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("status "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token constant"},"PENDING"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("status "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"FULFILLED"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("value "),n("span",{class:"token operator"},"="),s(" value"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token comment"},"// 依次将对应的函数执行")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("onResolvedCallbacks"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"fn"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token function-variable function"},"reject"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"reason"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("status "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token constant"},"PENDING"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("status "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"REJECTED"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("reason "),n("span",{class:"token operator"},"="),s(" reason"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token comment"},"// 依次将对应的函数执行")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("onRejectedCallbacks"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"fn"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token function"},"executor"),n("span",{class:"token punctuation"},"("),s("resolve"),n("span",{class:"token punctuation"},","),s(" reject"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"catch"),s(),n("span",{class:"token punctuation"},"("),s("error"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token function"},"reject"),n("span",{class:"token punctuation"},"("),s("error"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"then"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("onFulfilled"),n("span",{class:"token punctuation"},","),s(" onRejected")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("status "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token constant"},"FULFILLED"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token function"},"onFulfilled"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("value"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("status "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token constant"},"REJECTED"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token function"},"onRejected"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("reason"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("status "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token constant"},"PENDING"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token comment"},"// 如果promise的状态是 pending，需要将 onFulfilled 和 onRejected 函数存放起来，等待状态确定后，再依次将对应的函数执行")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("onResolvedCallbacks"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token function"},"onFulfilled"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("value"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token comment"},"// 如果promise的状态是 pending，需要将 onFulfilled 和 onRejected 函数存放起来，等待状态确定后，再依次将对应的函数执行")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("onRejectedCallbacks"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token function"},"onRejected"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("reason"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(" promise "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Promise"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("resolve"),n("span",{class:"token punctuation"},","),s(" reject")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"resolve"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'成功'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"then"),n("span",{class:"token punctuation"},"(")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"data"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'success'"),n("span",{class:"token punctuation"},","),s(" data"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"err"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'faild'"),n("span",{class:"token punctuation"},","),s(" err"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[5]||(a[5]=n("h3",{id:"手撕promise-all",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#手撕promise-all"},[n("span",null,"手撕promise.all")])],-1)),a[6]||(a[6]=n("p",null,"我们在Promise基础之上进行实现all方法 整体思路就是Promise.all的特征就是接受一组Promise,输出结果为这一组的结果",-1)),p(e,{id:"code-demo-283",type:"normal",code:"eJx1kbFOwzAQhl/llMlRUMoMBIk3YG87VJZDXJkzsi8wVJEQD8DGysjAgBi78DapeA0uqU3TtL0lzv//ufsuXiVLn1wkkwlsPl7an7fN1/vv63e7fm7Xn7fO3muv8oUxMyxrlKQtwsNWvTFGhKNPYTVD4HKKaoeA6gnCx0I45a15VGdsLpWkFIrrGO9KWvTEnq8NeShgOr/cmUYRB2okNs4HemkdiM7UvcGPq8jlc6PwjioWs+wfLFYMTfU8p0phj8eTx1SxAhfHedD2ZYCx24ERs+yIo0sQYYGiGCMe0A2mdr8ssPn0SONmX2rSXC5IVkIo56w7vU53BSEz6toMhdC+1/icNH++KKFq"},{default:l(()=>a[2]||(a[2]=[n("div",{class:"language-javascript line-numbers-mode","data-highlighter":"prismjs","data-ext":"js","data-title":"js"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// 如何实现一个Promise.all")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"promiseAll"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"promises"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Promise"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("resolve"),n("span",{class:"token punctuation"},","),s(" reject")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"const"),s(" results "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"let"),s(" count "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" promises"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            promises"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"then"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"result"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("                results"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" result"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("                count"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("count "),n("span",{class:"token operator"},"==="),s(" promises"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("                    "),n("span",{class:"token function"},"resolve"),n("span",{class:"token punctuation"},"("),s("results"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"catch"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"error"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token function"},"reject"),n("span",{class:"token punctuation"},"("),s("error"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[7]||(a[7]=t(`<h2 id="说说你知道的proxy" tabindex="-1"><a class="header-anchor" href="#说说你知道的proxy"><span>说说你知道的Proxy?</span></a></h2><h2 id="什么是reflect" tabindex="-1"><a class="header-anchor" href="#什么是reflect"><span>什么是Reflect?</span></a></h2><p>反射</p><h3 id="deleteproperty" tabindex="-1"><a class="header-anchor" href="#deleteproperty"><span>deleteProperty</span></a></h3><p>Reflect.deleteProperty(obj, prop) 方法用于删除对象的属性。 参数：</p><ul><li>obj：要删除属性的对象</li><li>prop：要删除的属性的名称 返回值：</li><li>返回一个布尔值，表示属性是否成功删除。如果成功删除，则返回 true，否则返回 false。 示例代码如下：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Before:&#39;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Output: { name: &#39;Alice&#39;, age: 25 }</span></span>
<span class="line"></span>
<span class="line">Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;After:&#39;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Output: { name: &#39;Alice&#39; }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们定义了一个对象 obj，包含 name 和 age 属性。然后我们使用 Reflect.deleteProperty 方法删除了 obj 对象的 age 属性。最后输出 obj 对象，发现 age 属性已经被成功删除。 <strong>好处</strong></p><ul><li>返回布尔值：Reflect.deleteProperty 方法会返回一个布尔值，表示属性是否成功删除。这使得我们可以在删除属性之后进行相应的逻辑处理。</li><li>无副作用：Reflect.deleteProperty 方法不会产生副作用，即不会触发对象的任何方法或触发拦截器。</li><li>兼容性：使用 Reflect.deleteProperty 方法可以提高代码的兼容性，因为此方法是标准的 JavaScript API，而不是对象上的特定方法。</li><li>支持 Proxy 对象：如果对象是一个 Proxy 对象，Reflect.deleteProperty 方法将调用 Proxy 的 deleteProperty 拦截器，以实现自定义的属性删除逻辑。</li></ul>`,9))])}const v=c(r,[["render",k],["__file","router.html.vue"]]),b=JSON.parse('{"path":"/interview/ES6/router.html","title":"ES6面试题","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"什么是async await?","slug":"什么是async-await","link":"#什么是async-await","children":[{"level":3,"title":"一次性发送多个请求，保证他们的顺序？","slug":"一次性发送多个请求-保证他们的顺序","link":"#一次性发送多个请求-保证他们的顺序","children":[]},{"level":3,"title":"async await的实现原理","slug":"async-await的实现原理","link":"#async-await的实现原理","children":[]},{"level":3,"title":"推荐文章","slug":"推荐文章","link":"#推荐文章","children":[]}]},{"level":2,"title":"你知道Generator吗？","slug":"你知道generator吗","link":"#你知道generator吗","children":[]},{"level":2,"title":"Set 和 Map","slug":"set-和-map","link":"#set-和-map","children":[{"level":3,"title":"遍历Map和Set","slug":"遍历map和set","link":"#遍历map和set","children":[]},{"level":3,"title":"如何实现一个Set","slug":"如何实现一个set","link":"#如何实现一个set","children":[]},{"level":3,"title":"如何实现一个Map","slug":"如何实现一个map","link":"#如何实现一个map","children":[]},{"level":3,"title":"WeakSet 和 WeakMap","slug":"weakset-和-weakmap","link":"#weakset-和-weakmap","children":[]}]},{"level":2,"title":"你是怎么理解ES6中Module的？使用场景？","slug":"你是怎么理解es6中module的-使用场景","link":"#你是怎么理解es6中module的-使用场景","children":[{"level":3,"title":"ES6的module使用","slug":"es6的module使用","link":"#es6的module使用","children":[]}]},{"level":2,"title":"详细解释一下Promise？","slug":"详细解释一下promise","link":"#详细解释一下promise","children":[{"level":3,"title":"代码实现Promise","slug":"代码实现promise","link":"#代码实现promise","children":[]},{"level":3,"title":"手撕promise.all","slug":"手撕promise-all","link":"#手撕promise-all","children":[]}]},{"level":2,"title":"说说你知道的Proxy?","slug":"说说你知道的proxy","link":"#说说你知道的proxy","children":[]},{"level":2,"title":"什么是Reflect?","slug":"什么是reflect","link":"#什么是reflect","children":[{"level":3,"title":"deleteProperty","slug":"deleteproperty","link":"#deleteproperty","children":[]}]}],"git":{"updatedTime":1740645612000,"contributors":[{"name":"LiHegui","username":"LiHegui","email":"1487647822@qq.com","commits":4,"url":"https://github.com/LiHegui"}]},"filePathRelative":"interview/ES6/router.md"}');export{v as comp,b as data};
