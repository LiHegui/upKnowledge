import{_ as s,e as a,f as e,o as t}from"./app-BeRZjn83.js";const p={};function c(o,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="react知识-库" tabindex="-1"><a class="header-anchor" href="#react知识-库"><span>React知识 库</span></a></h1><h2 id="理解useeffect" tabindex="-1"><a class="header-anchor" href="#理解useeffect"><span>理解useEffect</span></a></h2><p>允许函数组件执行副作用操作 在一定程度上充当生命周期的缺席 useEffect能够为函数组件引入副作用 componentDidMount、componentDidUpdate、ComponentWillUnmount 都可以放在这里做</p><h3 id="更加深入的理解useeffect" tabindex="-1"><a class="header-anchor" href="#更加深入的理解useeffect"><span>更加深入的理解useEffect</span></a></h3><blockquote><p>前情提示： useEffect 在执行时是有顺序的！！！ 如果useEffect 不传第二个参数(不传依赖项) ，不仅 初次渲染 会执行，并且只要设置的 任一 state 值改变 都会 触发 useEffect执行！！！ 也就是 React初次渲染和之后的每次更新渲染都会调用一遍useEffect函数</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">You clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>You clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">        Click me</span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>effect如何获取最新的count的状态值</p><h3 id="连接到外部系统" tabindex="-1"><a class="header-anchor" href="#连接到外部系统"><span>连接到外部系统</span></a></h3><blockquote><p>你需要向 useEffect 传递两个参数： 一个 setup 函数 ，其 setup 代码 用来连接到该系统。 它应该返回一个 清理函数（cleanup），其 cleanup 代码 用来与该系统断开连接。 一个 依赖项列表，包括这些函数使用的每个组件内的值。</p></blockquote><blockquote><p>React 在必要时会调用 setup 和 cleanup，这可能会发生多次：</p><ol><li>将组件挂载到页面时，将运行 setup 代码。</li><li>重新渲染 依赖项 变更的组件后： <ul><li>首先，使用旧的 props 和 state 运行 cleanup 代码。</li><li>然后，使用新的 props 和 state 运行 setup 代码。</li></ul></li><li>当组件从页面卸载后，cleanup 代码 将运行最后一次。</li></ol></blockquote><h3 id="自定义hook" tabindex="-1"><a class="header-anchor" href="#自定义hook"><span>自定义Hook</span></a></h3><p>官网上有个比较好的例子 - 定制 useChatRoom Hook</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createConnection <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./chat.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">ChatRoom</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> roomId <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>serverUrl<span class="token punctuation">,</span> setServerUrl<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;https://localhost:1234&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  	<span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token function">createConnection</span><span class="token punctuation">(</span>serverUrl<span class="token punctuation">,</span> roomId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      connection<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  	<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>serverUrl<span class="token punctuation">,</span> roomId<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以把useEffect那一段拆离出来做自定义Hook</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createConnection <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./chat.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useChatRoom</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> serverUrl<span class="token punctuation">,</span> roomId <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token function">createConnection</span><span class="token punctuation">(</span>serverUrl<span class="token punctuation">,</span> roomId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      connection<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>roomId<span class="token punctuation">,</span> serverUrl<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们直接导入使用即可</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"> <span class="token function">useChatRoom</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">roomId</span><span class="token operator">:</span> roomId<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">serverUrl</span><span class="token operator">:</span> serverUrl</span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于庞大，可分离、可复用的逻辑，拆离出来做自定义Hook是个很好的选择</p><h4 id="在自定义hook中封装effect" tabindex="-1"><a class="header-anchor" href="#在自定义hook中封装effect"><span>在自定义Hook中封装Effect</span></a></h4><blockquote><p>Effect 是一个 “逃生出口”：当你需要“走出 React 之外”或者当你的使用场景没有更好的内置解决方案时，你可以使用它们。 如果你发现自己经常需要手动编写 Effect，那么这通常表明你需要为组件所依赖的通用行为提取一些 <strong>自定义 Hook</strong></p></blockquote><h3 id="控制非react小部件" tabindex="-1"><a class="header-anchor" href="#控制非react小部件"><span>控制非React小部件</span></a></h3><h2 id="探究-useeffect-原理" tabindex="-1"><a class="header-anchor" href="#探究-useeffect-原理"><span>探究 useEffect 原理</span></a></h2><h3 id="每次渲染都有它自己的effects" tabindex="-1"><a class="header-anchor" href="#每次渲染都有它自己的effects"><span>每次渲染都有它自己的Effects</span></a></h3><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p><a href="https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/" target="_blank" rel="noopener noreferrer">推荐资料</a></p><p><a href="https://juejin.cn/post/7039526242407677983?searchId=2023101314251286A16AFC4C8A37BF82C2" target="_blank" rel="noopener noreferrer">React-Hooks 初识 （二）：useEffect代替常用生命周期函数：useEffect 处理副作用</a></p>`,26)]))}const i=s(p,[["render",c],["__file","useEffect.html.vue"]]),u=JSON.parse('{"path":"/tools/repository/React/useEffect.html","title":"React知识 库","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"理解useEffect","slug":"理解useeffect","link":"#理解useeffect","children":[{"level":3,"title":"更加深入的理解useEffect","slug":"更加深入的理解useeffect","link":"#更加深入的理解useeffect","children":[]},{"level":3,"title":"连接到外部系统","slug":"连接到外部系统","link":"#连接到外部系统","children":[]},{"level":3,"title":"自定义Hook","slug":"自定义hook","link":"#自定义hook","children":[]},{"level":3,"title":"控制非React小部件","slug":"控制非react小部件","link":"#控制非react小部件","children":[]}]},{"level":2,"title":"探究 useEffect 原理","slug":"探究-useeffect-原理","link":"#探究-useeffect-原理","children":[{"level":3,"title":"每次渲染都有它自己的Effects","slug":"每次渲染都有它自己的effects","link":"#每次渲染都有它自己的effects","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"updatedTime":1738722167000,"contributors":[{"name":"LiHegui","username":"LiHegui","email":"1487647822@qq.com","commits":1,"url":"https://github.com/LiHegui"}]},"filePathRelative":"tools/repository/React/useEffect.md"}');export{i as comp,u as data};
