import{_ as s,e as a,f as t,o as e}from"./app-BeRZjn83.js";const p={};function l(i,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="前端怎么实现登录操作" tabindex="-1"><a class="header-anchor" href="#前端怎么实现登录操作"><span>前端怎么实现登录操作</span></a></h1><ul><li>用户输入账号和密码：用户在登录页面输入账号和密码，点击登录按钮发送登录请求，前端一般会使用非对称加密的公钥对密码进行加密，非对称加密一般使用rsa。</li><li>后端验证：前端将用户输入的账号和密码通过HTTP请求发送到后端服务器进行验证。后端服务器会对账号和密码进行验证： <ul><li>先匹配账号是否存在，不存在直接返回错误提示，</li><li>然后对密码进行验证，先对其进行私钥解密，再使用摘要算法加密后与数据库中这个账号下的密码进行匹配</li><li>都验证通过jwt.sign（）生成一个token，同时将token存储到数据库或缓存中，然后将token发送回前端。</li></ul></li><li>前端存储token：前端接收到后端返回的token后，通常会将其存储到浏览器的本地存储（LocalStorage或SessionStorage）中，以便后续的请求能够携带此token。</li><li>后续请求携带token：在用户进行后续操作时，前端会将token携带在每个请求的请求头Authorization中，以便后端服务器进行验证。</li><li>后端验证token：后端服务器在接收到前端请求后，会从请求头中获取token，并进行验证。验证通过后，将响应数据返回给前端。</li><li>退出登录：用户可以通过点击“退出登录”按钮来进行退出登录操作。此时，前端会将本地存储中的token清除，后端服务器也会将token从数据库或缓存中删除。这样，用户再进行后续操作时，就需要重新登录获取token。</li></ul><h2 id="什么是jwt" tabindex="-1"><a class="header-anchor" href="#什么是jwt"><span>什么是jwt</span></a></h2><ul><li>JSON Web Token(JWT) 是一个开放标准 RFC 519,它定义了一种紧凑且自包含的方式,用于作为 JSON 对象在各方面之间安全地传输信息;</li><li>JWT 是一个数字签名,生成的信息是可以验证并被信任的;</li><li>它可以使用 HMAC 算法（基于摘要算法但又不一样）或使用 RSA 或 ECDSA 的公钥/私钥（非对称加密）对 jwt 进行签名;</li><li>JWT 是目前最流行的跨域认证解决方案;</li></ul><h2 id="jwt-sign" tabindex="-1"><a class="header-anchor" href="#jwt-sign"><span>jwt.sign()</span></a></h2><p>形式：jwt.sign(payload, secretOrPrivateKey, options, callback); 参数说明：</p><ul><li>payload：要包含在 JWT 中的数据对象，通常包括用户标识、角色、权限等信息。</li><li>secretOrPrivateKey：用于签署 JWT 的密钥或私钥。密钥可以是一个字符串（对称加密）或私钥对象（非对称加密）。</li><li>options：可选参数，用于指定 JWT 的配置选项，例如过期时间、算法等。</li><li>callback：一个回调函数，用于接收生成的 JWT。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;jsonwebtoken&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> payload <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">userId</span><span class="token operator">:</span> <span class="token number">123456</span><span class="token punctuation">,</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;john.doe&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> secretKey <span class="token operator">=</span> <span class="token string">&#39;yourSecretKey&#39;</span><span class="token punctuation">;</span></span>
<span class="line">jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> secretKey<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> token</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;生成 JWT 失败:&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;生成的 JWT:&#39;</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8)]))}const c=s(p,[["render",l],["__file","登录的实现.html.vue"]]),u=JSON.parse('{"path":"/interview/%E5%89%8D%E7%AB%AF%E7%99%BB%E5%BD%95/%E7%99%BB%E5%BD%95%E7%9A%84%E5%AE%9E%E7%8E%B0.html","title":"前端怎么实现登录操作","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"什么是jwt","slug":"什么是jwt","link":"#什么是jwt","children":[]},{"level":2,"title":"jwt.sign()","slug":"jwt-sign","link":"#jwt-sign","children":[]}],"git":{"updatedTime":1738722167000,"contributors":[{"name":"LiHegui","username":"LiHegui","email":"1487647822@qq.com","commits":1,"url":"https://github.com/LiHegui"}]},"filePathRelative":"interview/前端登录/登录的实现.md"}');export{c as comp,u as data};
