import{_ as s,c as n,a as l,o as t}from"./app-DPjPDnzl.js";const i={};function p(e,a){return t(),n("div",null,a[0]||(a[0]=[l(`<h2 id="html行块元素" tabindex="-1"><a class="header-anchor" href="#html行块元素"><span>HTML行块元素</span></a></h2><ul><li>常见的块级元素 div p h1</li><li>常见的行内元素 span img button input label 二者之间的转换</li><li>转块级元素 display: block</li><li>转行内元素 display: inline</li></ul><h2 id="svg、canvas、html的区别" tabindex="-1"><a class="header-anchor" href="#svg、canvas、html的区别"><span>svg、canvas、html的区别</span></a></h2><p>SVG（Scalable Vector Graphics），Canvas 和 HTML（Hypertext Markup Language）是三种在Web上用于绘制和呈现内容的技术，它们之间有以下主要区别：</p><ol><li>图形描述方式： <ul><li>SVG：SVG是一种矢量图形描述语言，它使用XML格式来描述图形元素、路径、渐变等。SVG图形是基于矢量的，可以无损地缩放和变换，适合用于创建图标、图表等可缩放的图形。</li><li>Canvas：Canvas是一个HTML5元素，提供了一个绘图API，用于通过JavaScript绘制图形。Canvas是基于位图的，通过在画布上绘制像素来创建图形，它适合实时的、动态的图形绘制和图像处理。</li><li>HTML：HTML是用于创建网页结构和内容的标记语言，它主要用于描述文本、图像、链接等元素，而不是专门用于绘制图形。</li></ul></li><li>渲染方式： <ul><li>SVG：SVG图形在浏览器中以矢量形式进行渲染，可以通过CSS样式表和JavaScript进行控制和交互。</li><li>Canvas：Canvas使用JavaScript绘制图形，绘制的图形是位图，即像素级别的渲染。每当绘制发生变化时，需要重新绘制整个Canvas，因此对于复杂的动画效果，需要手动管理绘图过程。</li><li>HTML：HTML元素通常用于呈现文本和静态图像，其渲染由浏览器自动处理。</li></ul></li><li>功能和复杂性： <ul><li>SVG：SVG具有丰富的矢量图形功能，可以绘制复杂的形状、路径、渐变、变换等。它支持事件处理、动画效果和交互性，并且可以通过CSS进行样式控制。</li><li>Canvas：Canvas提供了基本的绘图功能，可以绘制线条、矩形、曲线等，但不支持事件处理和复杂的图形操作。Canvas更适合用于实时图形绘制和游戏开发，需要通过JavaScript进行绘制和交互。</li><li>HTML：HTML元素主要用于描述文本、图像、链接等，它提供了丰富的标记元素和属性，用于创建网页结构和内容，但不是专注于图形绘制。</li></ul></li><li>性能和兼容性： <ul><li>SVG：SVG图形的渲染由浏览器处理，可以在不同的设备和分辨率下进行缩放而不失真。然而，对于复杂的SVG图形和大量的动画效果，可能会对性能产生一定的影响，特别是在旧版本的浏览器上。</li><li>Canvas：Canvas绘制的图形是像素级的位图，具有较好的性能和响应能力。它适用于实时图形、游戏和数据可视化等领域。由于依赖JavaScript进行绘制，因此对较旧的浏览器版本和设备的支持可能有所限制。</li><li>HTML：HTML的渲染性能较高，对于静态的文本和图像呈现非常有效。HTML元素具有良好的兼容性，并且在各种浏览器和设备上都能正常工作。</li></ul></li></ol><hr><p>综上所述，SVG适用于创建可缩放的矢量图形，具有丰富的图形功能和交互性；Canvas适用于实时图形绘制和游戏开发，性能较高；而HTML主要用于创建网页结构和内容，不专注于图形绘制。选择使用其中的技术取决于你的具体需求和场景。</p><h2 id="html文档的构成" tabindex="-1"><a class="header-anchor" href="#html文档的构成"><span>html文档的构成</span></a></h2><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>页面标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"></span>
<span class="line">        <span class="token comment">/* 样式规则 */</span></span>
<span class="line">    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">        <span class="token comment">// JavaScript 代码</span></span>
<span class="line">    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token comment">&lt;!-- 页面内容 --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>html标签是HTML文档的根元素，包裹了整个HTML内容。</li><li>head标签用于定义文档的头部区域，其中包含了文档的元信息、样式和脚本等。 <ul><li>meta标签用于指定文档的字符编码等元信息。</li><li>title标签用于定义文档的标题，显示在浏览器的标题栏或选项卡上。</li><li>style标签用于定义CSS样式规则，可以在其中编写CSS代码，用于控制页面的样式。</li><li>script标签用于嵌入JavaScript代码，可以在其中编写JavaScript脚本，用于页面的交互和动态行为。</li></ul></li><li>body标签用于定义文档的主体区域，其中包含了页面的实际内容，如文本、图片、链接等。</li></ul><p>通常，推荐将样式（CSS）和脚本（JavaScript）的代码放置在head标签内，以确保在页面加载和渲染时先加载样式和脚本。这样可以避免样式和脚本的加载影响页面内容的显示。</p><p>需要注意的是，样式和脚本也可以放置在文档的其他位置，比如放在body标签内的任意位置。但是，为了良好的代码组织和可维护性，通常建议将样式和脚本集中放置在head标签内。</p><h2 id="为什么推荐将样式-css-和脚本-javascript-的代码放置在head标签内" tabindex="-1"><a class="header-anchor" href="#为什么推荐将样式-css-和脚本-javascript-的代码放置在head标签内"><span>为什么推荐将样式（CSS）和脚本（JavaScript）的代码放置在head标签内</span></a></h2><p>推荐将样式（CSS）和脚本（JavaScript）的代码放置在head标签内有以下几个原因：</p><ol><li>加载顺序控制：将样式和脚本放置在head标签内可以确保它们在页面内容加载和渲染之前被加载。这样可以避免样式和脚本的延迟加载导致页面内容闪烁或错位的情况发生，提升页面的用户体验。</li><li>样式优先渲染：将样式放置在head标签内可以让浏览器在渲染页面内容之前先加载和解析样式，从而更快地进行页面布局和渲染。这有助于避免页面在没有样式的情况下显示出“裸露”的内容，提高页面的外观稳定性。</li><li>脚本的执行时机控制：将脚本放置在head标签内可以在页面加载期间进行脚本的预处理或初始化操作，比如注册事件处理程序、执行一些必要的初始化代码等。这样可以确保在页面内容加载完成后，脚本能够立即响应用户的交互，提供更好的用户体验。</li></ol><p>尽管将样式和脚本放置在head标签内有利于页面加载和渲染的性能和体验，但在某些情况下，也可以将脚本放置在body标签的底部，以避免脚本加载和执行阻塞页面内容的显示。这种做法可以在一些特定的场景下提升页面加载的性能，但需要谨慎处理，以确保脚本的正确执行和页面的稳定性。</p><p>综上所述，将样式和脚本放置在head标签内是一种常见的最佳实践，可以保证页面在加载和渲染过程中的稳定性和性能。</p><h2 id="浏览器加载html-css-js的顺序" tabindex="-1"><a class="header-anchor" href="#浏览器加载html-css-js的顺序"><span>浏览器加载html\\css\\js的顺序</span></a></h2><p>浏览器加载 HTML、CSS 和 JavaScript 的顺序如下：</p><ol><li>HTML 的加载和解析：</li></ol><ul><li>浏览器从服务器获取 HTML 文件。</li><li>逐行解析 HTML 文件并构建 DOM（文档对象模型）树，创建页面的结构。</li><li>在解析过程中，如果遇到外部资源（如 CSS 和 JavaScript），浏览器会开始并行加载这些资源，而不会等待整个 HTML 文件解析完成。</li></ul><ol start="2"><li>CSS 的加载和解析：</li></ol><ul><li>浏览器在解析 HTML 文件时，遇到link标签和style标签时开始加载外部 CSS 文件或内嵌的 CSS 代码。</li><li>浏览器会下载 CSS 文件并进行解析，构建 CSSOM（CSS 对象模型）树。</li><li>CSSOM 树和 DOM 树合并，生成渲染树（Render Tree）。</li></ul><ol start="3"><li>渲染过程：</li></ol><ul><li>根据渲染树，浏览器计算每个元素的布局和样式。</li><li>浏览器绘制页面的像素，呈现给用户。</li></ul><ol start="4"><li>JavaScript 的加载和执行：</li></ol><ul><li>浏览器在解析 HTML 文件时，遇到script标签时开始加载外部 JavaScript 文件或内嵌的 JavaScript 代码。</li><li>浏览器会停止解析 HTML 文件，并开始下载和执行 JavaScript 代码。</li><li>JavaScript 代码的执行可能会修改 DOM 树、CSSOM 树以及页面的呈现结果。</li></ul><p>需要注意的是，浏览器在加载和执行 JavaScript 代码时会阻塞 HTML 的解析和渲染过程。如果 JavaScript 代码位于head标签内，会导致页面在加载 JavaScript 代码期间出现空白的情况。因此，为了避免这种情况，一般建议将 JavaScript 代码放在body标签底部，或者使用异步加载的方式（如 async 或 defer 属性）来提高页面的加载性能和用户体验。</p><p>总结起来，浏览器按照 HTML、CSS、JavaScript 的顺序进行加载和解析，每个阶段都会对页面的结构、样式和行为产生影响。优化这些加载过程可以提高页面的性能和用户体验。</p>`,29)]))}const o=s(i,[["render",p],["__file","html相关.html.vue"]]),u=JSON.parse('{"path":"/tools/docs/interview/HTML/html%E7%9B%B8%E5%85%B3.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"HTML行块元素","slug":"html行块元素","link":"#html行块元素","children":[]},{"level":2,"title":"svg、canvas、html的区别","slug":"svg、canvas、html的区别","link":"#svg、canvas、html的区别","children":[]},{"level":2,"title":"html文档的构成","slug":"html文档的构成","link":"#html文档的构成","children":[]},{"level":2,"title":"为什么推荐将样式（CSS）和脚本（JavaScript）的代码放置在head标签内","slug":"为什么推荐将样式-css-和脚本-javascript-的代码放置在head标签内","link":"#为什么推荐将样式-css-和脚本-javascript-的代码放置在head标签内","children":[]},{"level":2,"title":"浏览器加载html\\\\css\\\\js的顺序","slug":"浏览器加载html-css-js的顺序","link":"#浏览器加载html-css-js的顺序","children":[]}],"git":{"updatedTime":1738722167000,"contributors":[{"name":"LiHegui","username":"LiHegui","email":"1487647822@qq.com","commits":1,"url":"https://github.com/LiHegui"}]},"filePathRelative":"tools/docs/interview/HTML/html相关.md"}');export{o as comp,u as data};
