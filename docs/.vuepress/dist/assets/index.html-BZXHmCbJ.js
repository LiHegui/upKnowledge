import{_ as a,c as s,a as e,o as l}from"./app-DPjPDnzl.js";const t={};function i(p,n){return l(),s("div",null,n[0]||(n[0]=[e(`<h2 id="说说new操作符具体干了什么" tabindex="-1"><a class="header-anchor" href="#说说new操作符具体干了什么"><span>说说new操作符具体干了什么？</span></a></h2><ul><li>开辟一个内存空间</li><li>继承类上面的原型</li><li>改变this指向，this指向这个新对象</li><li>执行函数体中的代码，如果函数中有返回值并且返回值是一个对象类型，那么这个对象就作为 new 操作符的返回值；否则，返回第一步中创建的新对象。</li></ul><h2 id="实现new关键字" tabindex="-1"><a class="header-anchor" href="#实现new关键字"><span>实现new关键字</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token parameter">Func<span class="token punctuation">,</span><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Func</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// let result = Func.apply(args)</span></span>
<span class="line">    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">Func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> result intanceof Object<span class="token operator">?</span> result<span class="token operator">:</span>obj</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="call-apply-bind" tabindex="-1"><a class="header-anchor" href="#call-apply-bind"><span>call apply bind</span></a></h2><p>都可以改变this的指向，改变函数执行上下文的函数</p><ul><li>call 第一个参数为this指向,接受单个参数，只是单纯改变一次指向，并且调用时并且运行</li><li>apply 第一个参数为this指向，接受一组参数，只是单纯改变一次指向，并且调用时并且运行</li><li>bind 第一个参数为this,接受单个参数，指向永久改变,调用时不运行</li></ul><h2 id="遍历对象" tabindex="-1"><a class="header-anchor" href="#遍历对象"><span>遍历对象</span></a></h2><ul><li>Object.entries() JavaScript 中一个用来返回给定对象可枚举属性的键值对数组的方法，它返回一个由 [key, value] 数组构成的新数组，其中每个键值对对应于对象的一个可枚举属性。 Object.entries() 方法会遍历对象自身的可枚举属性，但不会遍历对象原型链上的属性。</li><li>for in 如果要遍历对象的所有属性，可以使用 for...in 循环。for...in 循环会遍历对象所有可枚举的属性，包括对象自身的属性和原型链上的属性。</li><li>Object.hasOwnProperty() Object.hasOwnProperty() 方法来判断一个属性是否是对象自身的属性</li></ul>`,9)]))}const o=a(t,[["render",i],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/tools/docs/interview/JavaScript/Object/","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"说说new操作符具体干了什么？","slug":"说说new操作符具体干了什么","link":"#说说new操作符具体干了什么","children":[]},{"level":2,"title":"实现new关键字","slug":"实现new关键字","link":"#实现new关键字","children":[]},{"level":2,"title":"call apply bind","slug":"call-apply-bind","link":"#call-apply-bind","children":[]},{"level":2,"title":"遍历对象","slug":"遍历对象","link":"#遍历对象","children":[]}],"git":{"updatedTime":1738722167000,"contributors":[{"name":"LiHegui","username":"LiHegui","email":"1487647822@qq.com","commits":1,"url":"https://github.com/LiHegui"}]},"filePathRelative":"tools/docs/interview/JavaScript/Object/index.md"}');export{o as comp,r as data};
