import{_ as p,c as s,a as t,o as r}from"./app-DPjPDnzl.js";const i={};function n(o,e){return r(),s("div",null,e[0]||(e[0]=[t('<h2 id="模块化" tabindex="-1"><a class="header-anchor" href="#模块化"><span>模块化</span></a></h2><p>前置</p><p>至少掌握一款模块化构建工具</p><p>资源</p><p>https://www.cyj.me/programming/2018/05/22/about-module-i/</p><p>https://www.cyj.me/programming/2018/05/23/about-module-ii/</p><p>https://juejin.cn/post/6844903635453739022</p><p>https://rollupjs.org/guide/en/</p><p>https://hinammehra.medium.com/build-a-private-react-component-library-cra-rollup-material-ui-github-package-registry-1e14da93e790</p><p>https://blog.logrocket.com/build-your-own-component-library-svelte/</p><p>目标</p><p>了解前端模块化发展过程中产生的模块系统以及遗留的使用方式</p><p>学习 Rollup 对比与 Webpack 构建模式的异同</p><p>分别构建 React/Svelte 组件库的 umd/cjs 模块，总结输出的文件的异同</p><h2 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式"><span>设计模式</span></a></h2><p>发布/订阅模式-观察者模式对比实现</p><p>资料</p><p>Pub-Sub pattern Observer vs Pub-Sub pattern</p><p>目标</p><p>区别二者的差异</p><p>具体应用场景以及实践</p><p>用自己的话总结一下</p><p>基于TypeScript实现一个类型安全的发布订阅</p><p>【观察者模式】和【发布订阅】 区别</p><h3 id="思考一下邮件系统业务流程" tabindex="-1"><a class="header-anchor" href="#思考一下邮件系统业务流程"><span>思考一下邮件系统业务流程</span></a></h3><p>1、观察者模式</p><p>组成：</p><p>两个角色：观察者与被观察者</p><p>实现：</p><p>被观察者</p><p>class Subject {</p><p>constructor() { this.observerList = []; }</p><p>addObserver(observer) { this.observerList.push(observer); }</p><p>removeObserver(observer) { const index = this.observerList.findIndex(o =&gt; o.name === observer.name); this.observerList.splice(index, 1); }</p><p>notifyObservers(message) { const observers = this.observeList; observers.forEach(observer =&gt; observer.notified(message)); }</p><p>}</p><p>观察者</p><p>class Observer { constructor(name, subject) { this.name = name; if (subject) { subject.addObserver(this); } }</p><p>notified(message) { console.log(this.name, &#39;got message&#39;, message); }</p><p>}</p><p>使用</p><p>const subject = new Subject(); const observerA = new Observer(&#39;observerA&#39;, subject); const observerB = new Observer(&#39;observerB&#39;); subject.addObserver(observerB); subject.notifyObservers(&#39;Hello from subject&#39;); subject.removeObserver(observerA); subject.notifyObservers(&#39;Hello again&#39;);</p><p>解析</p><p>观察者主动申请加入被观察者的列表</p><p>被观察者主动将观察者加入列表</p><p>2、发布订阅</p><p>组成：</p><p>至少三个角色：发布者、订阅者、发布订阅中心</p><p>实现：</p><p>发布订阅中心</p><p>class PubSub { constructor() { this.messages = {}; this.listeners = {}; } publish(type, content) { const existContent = this.messages[type]; if (!existContent) { this.messages[type] = []; } this.messages[type].push(content); } subscribe(type, cb) { const existListener = this.listeners[type]; if (!existListener) { this.listeners[type] = []; } this.listeners[type].push(cb); } notify(type) { const messages = this.messages[type]; const subscribers = this.listeners[type] || []; subscribers.forEach((cb, index) =&gt; cb(messages[index])); } }</p><p>发布者</p><p>class Publisher { constructor(name, context) { this.name = name; this.context = context; } publish(type, content) { this.context.publish(type, content); } }</p><p>订阅者</p><p>class Subscriber { constructor(name, context) { this.name = name; this.context = context; } subscribe(type, cb) { this.context.subscribe(type, cb); } }</p><p>使用</p><p>const TYPE_A = &#39;music&#39;; const TYPE_B = &#39;movie&#39;; const TYPE_C = &#39;novel&#39;;</p><p>const pubsub = new PubSub();</p><p>const publisherA = new Publisher(&#39;publisherA&#39;, pubsub); publisherA.publish(TYPE_A, &#39;we are young&#39;); publisherA.publish(TYPE_B, &#39;the silicon valley&#39;); const publisherB = new Publisher(&#39;publisherB&#39;, pubsub); publisherB.publish(TYPE_A, &#39;stronger&#39;); const publisherC = new Publisher(&#39;publisherC&#39;, pubsub); publisherC.publish(TYPE_C, &#39;a brief history of time&#39;);</p><p>const subscriberA = new Subscriber(&#39;subscriberA&#39;, pubsub); subscriberA.subscribe(TYPE_A, res =&gt; { console.log(&#39;subscriberA received&#39;, res) }); const subscriberB = new Subscriber(&#39;subscriberB&#39;, pubsub); subscriberB.subscribe(TYPE_C, res =&gt; { console.log(&#39;subscriberB received&#39;, res) }); const subscriberC = new Subscriber(&#39;subscriberC&#39;, pubsub); subscriberC.subscribe(TYPE_B, res =&gt; { console.log(&#39;subscriberC received&#39;, res) });</p><p>pubsub.notify(TYPE_A); pubsub.notify(TYPE_B); pubsub.notify(TYPE_C);</p><p>解析</p><p>发布者和订阅者实现比较简单，只需完成各自发布、订阅的任务即可</p><p>重点在于二者需要确保在与同一个发布订阅中心进行关联，否则两者之间的通信无从关联。</p><p>发布者的发布动作和订阅者的订阅动作相互独立，无需关注对方业务，消息派发由发布订阅中心负责。</p><p>实际应用</p><p>Node.js中自带的EventEmiter模块</p><p>Vue.js中数据响应式的实现</p><h2 id="http" tabindex="-1"><a class="header-anchor" href="#http"><span>HTTP</span></a></h2><p>资料</p><p>Cache-Control https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control</p><p>HTTP缓存控制小结 https://imweb.io/topic/5795dcb6fb312541492eda8c</p><p>目标</p><p>常见 SPA/SSG 前端方案中所使用的缓存控制策略以及配置细节</p><h2 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack"><span>Webpack</span></a></h2><p>资料</p><p>Webpack https://webpack.js.org/concepts/</p><p>TypeScript With Babel: A Beautiful Marriage https://iamturns.com/typescript-babel/</p><p>目标</p><p>使用 Webpack 搭建支持 TypeScript/React/ESLint 的项目并讲解搭建细节</p><h2 id="客户端缓存" tabindex="-1"><a class="header-anchor" href="#客户端缓存"><span>客户端缓存</span></a></h2><p>资料：</p><p>MDN : https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Client-side_storage</p><p>目标：</p><p>介绍客户端缓存，每种缓存的优缺点和特性。</p><h2 id="路由" tabindex="-1"><a class="header-anchor" href="#路由"><span>路由</span></a></h2><p>资料：</p><p>rendering-on-the-web： https://web.dev/articles/rendering-on-the-web?hl=zh-cn</p><p>目标：</p><p>路由实现原理及优缺点。（spa、ssr） Gatsby的路由是如何实现的？</p><h2 id="异步机制" tabindex="-1"><a class="header-anchor" href="#异步机制"><span>异步机制</span></a></h2><p>资料</p><p>并发模型与事件循环 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Event_loop</p><p>Philip Roberts: Help, I’m stuck in an event-loop https://vimeo.com/96425312</p><p>Asynchronous Recursion with Callbacks, Promises and Async. https://blog.scottlogic.com/2017/09/14/asynchronous-recursion.html</p><p>目标</p><p>用简单的几个例子讲解 JavaScript 的并发模型与事件循环</p><p>实现 Promise queue 以及简单列举应用场景</p><p>实现 Promise loop 以及简单列举应用场景</p><p>实现一个使用 Promise 解决竞态条件的例子</p><h2 id="gatsby" tabindex="-1"><a class="header-anchor" href="#gatsby"><span>Gatsby</span></a></h2><p>Gatsby</p><p>资料</p><p>gatsby https://www.gatsbyjs.com/</p><p>目标</p><p>该解决方案有什么特性能解决什么方面的问题</p><p>组织以子域名划分/以子路径划分的网站时如何使用 mono repo/multi remo 项目结构实现独立开发，独立构件及部署</p><h2 id="个人博客搭建分享" tabindex="-1"><a class="header-anchor" href="#个人博客搭建分享"><span>个人博客搭建分享</span></a></h2><p>博客</p><p>Hexo</p><p>搭建：https://hexo.io/zh-cn/ 优化：https://juejin.cn/post/6884900236427264013</p><p>GitHub pages</p><p>搭建：https://docs.github.com/cn/pages/getting-started-with-github-pages/creating-a-github-pages-site</p><p>GitBook</p><p>搭建：https://docs.gitbook.com/getting-started/start-exploring</p><h2 id="useeffect" tabindex="-1"><a class="header-anchor" href="#useeffect"><span>useEffect</span></a></h2><p>https://overreacted.io/</p><p>阅读《useEffect 完整指南》 并写一篇不少与800字（不强制要求）的读后感，转述给其他人理解</p><h2 id="浏览器加载流程" tabindex="-1"><a class="header-anchor" href="#浏览器加载流程"><span>浏览器加载流程</span></a></h2><p>https://developer.chrome.com/blog/inside-browser-part3?hl=zh-cn</p><h2 id="子路径项目部署" tabindex="-1"><a class="header-anchor" href="#子路径项目部署"><span>子路径项目部署</span></a></h2><p>前置</p><p>完整部署过 Web 应用</p><p>了解 Nginx 简单的路径配置指令</p><p>资源</p><p>https://stackoverflow.com/questions/10631933/nginx-static-file-serving-confusion-with-root-alias</p><p>https://webpack.js.org/guides/public-path/</p><p>目标</p><p>构建两个 Web 应用分别部署在根路径以及 /subdirectory 路径</p><p>要求使用 Nginx 作 Web 容器</p><p>要求应用都有路由/静态资源文件</p><p>子路径部署的项目静态文件能正确访问</p><h2 id="入门" tabindex="-1"><a class="header-anchor" href="#入门"><span>入门</span></a></h2><p>开发环境/工具链</p><p>查阅</p><p>MDN https://developer.mozilla.org/zh-CN/</p><p>Can I use</p><p>Playground</p><p>CodeSandBox https://codesandbox.io/</p><p>CodePen https://codepen.io/</p><p>终端/环境/Shell</p><p>Windows Subsystem for Linux Documentation https://learn.microsoft.com/en-us/windows/wsl/</p><p>Windows Terminal</p><p>Oh My Zsh</p><p>nvm https://github.com/nvm-sh/nvm</p><p>调试工具</p><p>Chrome DevTools</p><p>Msic</p><p>MDN 建议及早补全 HTML elements reference/CSS key concepts/JavaScript Advanced 这三个章节</p><p>Chrome DevTools 至少看完 CSS/Console/Network/Storage/JavaScript 章节</p><p>版本管理</p><p>推荐阅读</p><p>猴子都能懂的GIT入门 https://nulab.com/zh-cn/learn/software-development/git-tutorial/</p><p>Gitflow Workflow https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow</p><p>学习 Git 分支 https://learngitbranching.js.org/?locale=zh_CN</p><p>推荐工具</p><p>GitLens</p><p>Lazygit</p><p>Oh My Zsh git plugin</p><p>Msic</p><p>如果是 Window 系统请把忽略大小写设置为 false</p><p>git config core.ignorecase false</p><p>每次提交前做好 git diff</p><p>细化自己的提交粒度</p><p>编程风格/规范</p><p>推荐阅读</p><p>ECNAScript 6 入门 - 编程风格</p><p>必备工具/插件</p><p>EditorConfig</p><p>Prettier</p><p>Msic</p><p>代码格式化需要强制且自动化，在历史遗留项目中仍然手动去支持</p><p>lint 用于规避隐性逻辑错误或者更好的代码风格支持或者学习最佳代码实践，即使项目没有集成也应该本地开启</p><p>不要忽略任何控制台的 linter warning，请点击链接查看正确与错误用法</p>',174)]))}const c=p(i,[["render",n],["__file","index.html.vue"]]),l=JSON.parse('{"path":"/repository/%E9%9C%80%E8%A6%81%E6%95%B4%E7%90%86%E7%9A%84%E8%B5%84%E6%96%99/","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"模块化","slug":"模块化","link":"#模块化","children":[]},{"level":2,"title":"设计模式","slug":"设计模式","link":"#设计模式","children":[{"level":3,"title":"思考一下邮件系统业务流程","slug":"思考一下邮件系统业务流程","link":"#思考一下邮件系统业务流程","children":[]}]},{"level":2,"title":"HTTP","slug":"http","link":"#http","children":[]},{"level":2,"title":"Webpack","slug":"webpack","link":"#webpack","children":[]},{"level":2,"title":"客户端缓存","slug":"客户端缓存","link":"#客户端缓存","children":[]},{"level":2,"title":"路由","slug":"路由","link":"#路由","children":[]},{"level":2,"title":"异步机制","slug":"异步机制","link":"#异步机制","children":[]},{"level":2,"title":"Gatsby","slug":"gatsby","link":"#gatsby","children":[]},{"level":2,"title":"个人博客搭建分享","slug":"个人博客搭建分享","link":"#个人博客搭建分享","children":[]},{"level":2,"title":"useEffect","slug":"useeffect","link":"#useeffect","children":[]},{"level":2,"title":"浏览器加载流程","slug":"浏览器加载流程","link":"#浏览器加载流程","children":[]},{"level":2,"title":"子路径项目部署","slug":"子路径项目部署","link":"#子路径项目部署","children":[]},{"level":2,"title":"入门","slug":"入门","link":"#入门","children":[]}],"git":{"updatedTime":1738722167000,"contributors":[{"name":"LiHegui","username":"LiHegui","email":"1487647822@qq.com","commits":1,"url":"https://github.com/LiHegui"}]},"filePathRelative":"repository/需要整理的资料/index.md"}');export{c as comp,l as data};
