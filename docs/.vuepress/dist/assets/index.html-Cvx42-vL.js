import{_ as c,c as o,a,b as n,d as e,e as t,f as r,r as p,o as u}from"./app-DPjPDnzl.js";const d="/upKnowledge/assets/render-BcQA-m3J.png",k={},v={start:"2"},m={id:"react-高阶组件",tabindex:"-1"},h={class:"header-anchor",href:"#react-高阶组件"};function b(g,s){const l=p("App"),i=p("RouteLink");return u(),o("div",null,[s[3]||(s[3]=a(`<h1 id="react面试题" tabindex="-1"><a class="header-anchor" href="#react面试题"><span>React面试题</span></a></h1><h2 id="谈谈你对react的理解" tabindex="-1"><a class="header-anchor" href="#谈谈你对react的理解"><span>谈谈你对React的理解</span></a></h2><p>React是构建用户界面的JavaScript库，只提供了UI层面的解决方案</p><p>特点：</p><ul><li><p>JSX的语法</p></li><li><p>单向数据绑定 速度更快</p></li><li><p>虚拟DOM</p></li><li><p>声明式编程</p></li><li><p>component 更注重抽离和组件化 组件式开发，提高代码复用率 应该具有的特点：可组合，可重用，可维护</p></li></ul><h2 id="jsx转成真实dom的过程" tabindex="-1"><a class="header-anchor" href="#jsx转成真实dom的过程"><span>JSX转成真实DOM的过程</span></a></h2><p>JSX是JavaScript的一种语法拓展，它和模板语言很像，但是它具备充分的JavaScript的能力</p><p>经过babel的处理</p><ol><li>JSX 会被编译为React.createElement(), React.createElement()将会返回一个叫做React Element的JS对象 这里的编译就是指babel</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">* React.createElement</span>
<span class="line">* <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">type</span> 用于标识节点的类型</span>
<span class="line">* <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">config</span> 以对象形式传入，组件所有的属性都会以键值对的形式储存到conig对象中</span>
<span class="line">* <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">children</span> 以对象的形式传入，，它记录的是组件标签之间的嵌套的内容</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> config<span class="token punctuation">,</span> children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🔨 demo</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ClassComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>     <span class="token comment">// 类式组件</span></span>
<span class="line">  <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;pink&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;border&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>ClassComponent<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>color<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p <span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">FunctionComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 函数式组件</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;border&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">      FunctionComponent</span>
<span class="line">      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p <span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> jsx <span class="token operator">=</span> <span class="token punctuation">(</span>                        </span>
<span class="line">  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;border&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>xx<span class="token operator">&lt;</span><span class="token operator">/</span>p <span class="token operator">&gt;</span>                   </span>
<span class="line">    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;#&quot;</span><span class="token operator">&gt;</span>xxx<span class="token operator">&lt;</span><span class="token operator">/</span> a<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>FunctionComponent name<span class="token operator">=</span><span class="token string">&quot;函数组件&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>ClassComponent name<span class="token operator">=</span><span class="token string">&quot;类组件&quot;</span> color<span class="token operator">=</span><span class="token string">&quot;red&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里值得注意的是</p><p>JSX -&gt; babel -&gt; React.createElement -&gt; ReactElement -&gt; 虚拟DOM -&gt;ReactDoM.render() -&gt; 真实DOM</p><p>在转化过程中，babel在编译时会判断 JSX 中组件的首字母：</p><p>当首字母为小写时，其被认定为原生 DOM 标签，createElement 的第一个变量被编译为字符串</p><p>当首字母为大写时，其被认定为自定义组件，createElement 的第一个变量被编译为对象</p><p>React.createElement其被调用时会传⼊标签类型type，标签属性props及若干子元素children</p>`,18)),n("ol",v,[n("li",null,[s[0]||(s[0]=e("最后，React.render会将React Element对象渲染到真实的DOM 最后就是挂载某个节点上 ReactDOM.render(")),t(l),s[1]||(s[1]=e(', document.getElementById("root"));'))])]),s[4]||(s[4]=a(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token comment">// 需要渲染的元素(ReactElement)</span></span>
<span class="line">  element<span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 元素挂载的目标容器</span></span>
<span class="line">  container<span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 回调函数， 可选参数，， 可以用来处理渲染结束后的逻辑</span></span>
<span class="line">  callback</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个流程图解</p><p><img src="`+d+`" alt=""></p><h2 id="react-生命周期" tabindex="-1"><a class="header-anchor" href="#react-生命周期"><span>React 生命周期</span></a></h2><p>组件初始化 -&gt; render方法</p><p>渲染工作流 指的是从组件数据改变到组件实际更新发生的过程</p><p>React15</p><p>挂载 -&gt; 更新 -&gt; 卸载</p><ul><li>constructor()</li><li>componentWillReceiveProps() 父组件触发更新时触发（不一定是相关的props）</li><li>componentWillUnmount 组件卸载时触发（组件被移除 ）</li></ul><p>React16</p><p>废弃了componentWillMount</p><ul><li>getDerivedStateFromProps, 替代compponentWillReceiveProps 使用Props来派生/更新state 在更新和挂载两个阶段都会触发</li></ul><h2 id="说说-real-dom-和-virtual-dom-的区别-优缺点" tabindex="-1"><a class="header-anchor" href="#说说-real-dom-和-virtual-dom-的区别-优缺点"><span>说说 Real DOM 和 Virtual DOM 的区别？优缺点？</span></a></h2><p>虚拟DOM</p><p>组件更新 -&gt; render方法 -&gt; 生成新的虚拟DOM -&gt; diff算法 -&gt; 定位两次的差异 -&gt; 渲染真实DOM</p><h2 id="useref和usestate的区别" tabindex="-1"><a class="header-anchor" href="#useref和usestate的区别"><span>useRef和useState的区别</span></a></h2><ul><li><p>useRef</p><ul><li>获取元素 useRef 返回一个可变的 ref 对象</li><li>保存变量</li></ul></li><li><p>useState 使用, 返回两个值，state，和更新函数</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h2 id="说说对react中类组件和函数组件的理解-有什么区别" tabindex="-1"><a class="header-anchor" href="#说说对react中类组件和函数组件的理解-有什么区别"><span>说说对React中类组件和函数组件的理解？有什么区别？</span></a></h2><h2 id="类式组件" tabindex="-1"><a class="header-anchor" href="#类式组件"><span>类式组件</span></a></h2><h2 id="函数式组件" tabindex="-1"><a class="header-anchor" href="#函数式组件"><span>函数式组件</span></a></h2><h2 id="说说对react-hooks的理解-解决了什么问题" tabindex="-1"><a class="header-anchor" href="#说说对react-hooks的理解-解决了什么问题"><span>说说对React Hooks的理解？解决了什么问题？</span></a></h2><p>解决函数组件原为无状态组件，成为内部可以进行维护自身状态</p><ul><li><p>useState</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意：</p><ol><li>initialState: 你希望 state 初始化的值。它可以是任何类型的值，但对于函数有特殊的行为。在初始渲染后，此参数将被忽略</li><li>严格模式下，React将两次调用初始化函数，</li><li>set函数仅更新下一次的渲染的状态变量。如果在调用set函数后读取状态变量。如果在调用 set 函数后读取状态变量，则 仍会得到在调用之前显示在屏幕上的旧值。如果你提供的新值与当前 state 相同（由 Object.is 比较确定），React 将 跳过重新渲染该组件及其子组件。React 会 批量处理状态更新。它会在所有 事件处理函数运行 并调用其 set 函数后更新屏幕。这可以防止在单个事件期间多次重新渲染。</li><li>flushSync 允许你强制 React 在提供的回调函数内同步刷新任何更新，这将确保 DOM 立即更新 React 会存储新状态，使用新值重新渲染组件，并更新 UI 调用 set 函数 不会 改变已经执行的代码中当前的 state （有一种异步的感觉） - <strong>解决办法</strong>： 你可以向 set函数中传递一个 更新函数，而不是下一个状态</li></ol><p>更新状态中的对象和数组 可以通过创建一个新对象来替换整个对象</p></li><li><p>useRef 引入一个不需要渲染的值</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> ref <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>initialValue：ref 对象的 current 属性的初始值。可以是任意类型的值。这个参数在首次渲染后被忽略。</p><blockquote><p>useRef返回一个对象，ref.current为initialValue. 改变 ref.current 属性时，React 不会重新渲染组件。 React 不知道它何时会发生改变，因为 ref 是一个普通的 JavaScript 对象。</p></blockquote><ol><li>使用 useRef 声明 ref。你可以在其中保存任何值，但最常用于保存 DOM 节点。</li><li>使用用 ref 引用一个值</li></ol><ul><li>可以在重新渲染之间 存储信息</li><li>可以在重新渲染之间 存储信息</li><li></li></ul><p>注意：改变ref不会触发渲染，</p></li><li><p>useEffect</p></li><li><p>useContext useContext, 可以让你读取和订阅组件中的context</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">  <span class="token function">useContext</span><span class="token punctuation">(</span>SomeContext<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>SomeContext：先前用 createContext 创建的 context。context 本身不包含信息，它只代表你可以提供或从组件中读取的信息类型。 <strong>用法：</strong></p><ul><li>向组件深处传递数据</li><li>通过context更新传递的数据</li></ul></li><li><p>useCallback</p></li><li><p>useReducer 在组件的顶层作用域调用 useReducer 以创建一个用于管理状态的 reducer。</p></li></ul><h2 id="state-和-props-有什么区别" tabindex="-1"><a class="header-anchor" href="#state-和-props-有什么区别"><span>state 和 props 有什么区别？</span></a></h2><ul><li>state state是用来保存组件状态、控制以及修改自己状态。 外部不可访问，可以说是组件私有属性</li><li>props 是传递给组件的（类似于函数的传参），只读不可改</li></ul><h2 id="组件中如何验证props" tabindex="-1"><a class="header-anchor" href="#组件中如何验证props"><span>组件中如何验证Props</span></a></h2><p>React为我们提供了PropTypes以供验证使用。如果使用typescript那么就可以直接用接口来定义。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> propTypes <span class="token keyword">from</span> <span class="token string">&#39;prop-types&#39;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">State</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            </span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">            <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">State<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> propTypes<span class="token punctuation">.</span>string</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> State<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="super-和-super-props-有什么区别" tabindex="-1"><a class="header-anchor" href="#super-和-super-props-有什么区别"><span>super() 和 super(props) 有什么区别？</span></a></h1><p>super()和super(props)都是调用父类构造函数的语句。</p><ul><li>super() 会调用父类的构造函数并将this绑定到子类的实例。如果子类的构造函数中 没有使用this,则可以省略super调用</li><li>super(props) 则是在子类的构造函数中调用父类的构造函数，并将props对象出传递给父类的构造函数。 props对象传递给父类的构造函数，以便在组件中使用this.props访问它。</li></ul><h2 id="super" tabindex="-1"><a class="header-anchor" href="#super"><span>super</span></a></h2><p>在JavaScript中，super是一个关键字，用于调用父类中的构造函数和方法。</p><ul><li>当子类继承父类时，子类必须使用 super 调用父类的构造函数，以便子类可以继承父类的属性和方法。在 constructor 方法中，使用 super 调用父类的构造函数时，可以使用 this 关键字访问子类的属性和方法</li></ul><h1 id="说说-react中的setstate执行机制" tabindex="-1"><a class="header-anchor" href="#说说-react中的setstate执行机制"><span>说说 React中的setState执行机制</span></a></h1><p>类式组件中有setState机制</p><ul><li>组件中多次调用setState()，会进行合并，组件只执行一次更新操作</li><li>流程 1.将setState传入的partialState参数存储在当前组件实例的state暂存队列中。 2.判断当前React是否处于批量更新状态，如果是，将当前组件加入待更新的组件队列中。 3.如果未处于批量更新状态，将批量更新状态标识设置为true，用事务再次调用前一步方法，保证当前组件加入到了待更新组件队列中。 4.调用事务的waper方法，遍历待更新组件队列依次执行更新。 5.执行生命周期componentWillReceiveProps。 6.将组件的state暂存队列中的state进行合并，获得最终要更新的state对象，并将队列置为空。 7.执行生命周期componentShouldUpdate，根据返回值判断是否要继续更新。 8.执行生命周期componentWillUpdate。 9.执行真正的更新，render。 10.执行生命周期componentDidUpdate</li></ul><h2 id="setstate是同步还是异步" tabindex="-1"><a class="header-anchor" href="#setstate是同步还是异步"><span>setState是同步还是异步？</span></a></h2><p>我们先来了解一下setState过程 代码中调用了setState函数之后，React会将传入的参数对象与组件进行合并。然后触发调和过程。经过调和过程， React会以相对高效的方式根据新的状态构建React元素树，并且着手重新渲染整个UI界面。</p><ul><li>setState是同步还是异步 setState并不是单纯异步还是同步，具体情况具体分析 <ul><li>state完全替换</li><li>React控制不到的地方，比如原生事件</li></ul></li></ul><h2 id="setstate一定会合并吗" tabindex="-1"><a class="header-anchor" href="#setstate一定会合并吗"><span>setState一定会合并吗</span></a></h2><p>其实不然，完全替换的时候，就不会合并。合并只是一种优化策略。</p>`,42)),n("h2",m,[n("a",h,[n("span",null,[t(i,{to:"/interview/React/%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6.html"},{default:r(()=>s[2]||(s[2]=[e("React 高阶组件")])),_:1})])])]),s[5]||(s[5]=a(`<h2 id="react-hooks的使用限制有哪些" tabindex="-1"><a class="header-anchor" href="#react-hooks的使用限制有哪些"><span>React Hooks的使用限制有哪些？</span></a></h2><h2 id="react-fiber是什么-有什么用" tabindex="-1"><a class="header-anchor" href="#react-fiber是什么-有什么用"><span>React fiber是什么？有什么用？</span></a></h2><p>Fiber会将一个额大的更新任务拆解为许多个小任务</p><p>Fiber架构的重要特征就是可以被打断的异步渲染方式</p><p>生命周期工作流</p><p><strong>render阶段在执行过程中允许被打断，而commit阶段总是同步执行的</strong></p><h2 id="react18和之前版本的区别" tabindex="-1"><a class="header-anchor" href="#react18和之前版本的区别"><span>React18和之前版本的区别</span></a></h2><h2 id="为什么说react中的props是只读的" tabindex="-1"><a class="header-anchor" href="#为什么说react中的props是只读的"><span>为什么说React中的props是只读的？</span></a></h2><p>React中props是单项数据流，父组件传进子组件的数据props改变后，子组件也会进行改变，但是子组件不可更改props的值，让变化变得难以预测</p><h2 id="react-fiber它的目的是解决什么问题" tabindex="-1"><a class="header-anchor" href="#react-fiber它的目的是解决什么问题"><span>React Fiber它的目的是解决什么问题？</span></a></h2><p>GUI线程和JS线程是互斥的，会导致</p><ul><li>GUI负责绘制</li><li>JS执行脚本</li></ul><h2 id="react组件化" tabindex="-1"><a class="header-anchor" href="#react组件化"><span>React组件化</span></a></h2><h2 id="redux" tabindex="-1"><a class="header-anchor" href="#redux"><span>Redux</span></a></h2><p>Redux是负责状态管理</p><ul><li>单一数据源</li><li>state 是只读的</li><li>使用纯函数来执行修改</li></ul><h3 id="如何使用" tabindex="-1"><a class="header-anchor" href="#如何使用"><span>如何使用</span></a></h3><ul><li>创建一个store</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">  <span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span> <span class="token comment">// 引入一个第三方的方法</span></span>
<span class="line">  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 创建数据的公共存储区域（管理员）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>state</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">  <span class="token comment">// 设置默认值</span></span>
<span class="line">  <span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> initialState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 也就是reducer</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>action 改变内部状态的唯一方法是 dispatch 一个 action。 这些 action 可以被序列化、记录或存储，然后再重放。 用户派发action, dispatch给store - type 代表需要被执行的 action 类别</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;ADD_NUMBER&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">5</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>异步action</strong></p></li><li><p>reducer 接受state, action, 处理相关数据，返回state reducer是一个纯函数，不需要直接修改state</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">  <span class="token keyword">function</span> <span class="token function">counterReducer</span><span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">case</span> <span class="token string">&quot;counter/incremented&quot;</span><span class="token operator">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> state<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">case</span> <span class="token string">&quot;counter/decremented&quot;</span><span class="token operator">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> state<span class="token punctuation">.</span>value <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">        <span class="token keyword">return</span> state<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>监听state的变化</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>Redux Toolkit是推荐的编写Redux逻辑的方法</p><ul><li>配置redux store</li><li>创建reducer函数并使用不可更改更新逻辑</li><li>一次性创建状态的某个片段slice</li></ul><h2 id="react-路由" tabindex="-1"><a class="header-anchor" href="#react-路由"><span>React 路由</span></a></h2><h2 id="react性能优化" tabindex="-1"><a class="header-anchor" href="#react性能优化"><span>React性能优化</span></a></h2>`,24))])}const R=c(k,[["render",b],["__file","index.html.vue"]]),y=JSON.parse('{"path":"/interview/React/","title":"React面试题","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"谈谈你对React的理解","slug":"谈谈你对react的理解","link":"#谈谈你对react的理解","children":[]},{"level":2,"title":"JSX转成真实DOM的过程","slug":"jsx转成真实dom的过程","link":"#jsx转成真实dom的过程","children":[]},{"level":2,"title":"React 生命周期","slug":"react-生命周期","link":"#react-生命周期","children":[]},{"level":2,"title":"说说 Real DOM 和 Virtual DOM 的区别？优缺点？","slug":"说说-real-dom-和-virtual-dom-的区别-优缺点","link":"#说说-real-dom-和-virtual-dom-的区别-优缺点","children":[]},{"level":2,"title":"useRef和useState的区别","slug":"useref和usestate的区别","link":"#useref和usestate的区别","children":[]},{"level":2,"title":"说说对React中类组件和函数组件的理解？有什么区别？","slug":"说说对react中类组件和函数组件的理解-有什么区别","link":"#说说对react中类组件和函数组件的理解-有什么区别","children":[]},{"level":2,"title":"类式组件","slug":"类式组件","link":"#类式组件","children":[]},{"level":2,"title":"函数式组件","slug":"函数式组件","link":"#函数式组件","children":[]},{"level":2,"title":"说说对React Hooks的理解？解决了什么问题？","slug":"说说对react-hooks的理解-解决了什么问题","link":"#说说对react-hooks的理解-解决了什么问题","children":[]},{"level":2,"title":"state 和 props 有什么区别？","slug":"state-和-props-有什么区别","link":"#state-和-props-有什么区别","children":[]},{"level":2,"title":"组件中如何验证Props","slug":"组件中如何验证props","link":"#组件中如何验证props","children":[]},{"level":2,"title":"super","slug":"super","link":"#super","children":[]},{"level":2,"title":"setState是同步还是异步？","slug":"setstate是同步还是异步","link":"#setstate是同步还是异步","children":[]},{"level":2,"title":"setState一定会合并吗","slug":"setstate一定会合并吗","link":"#setstate一定会合并吗","children":[]},{"level":2,"title":"React 高阶组件","slug":"react-高阶组件","link":"#react-高阶组件","children":[]},{"level":2,"title":"React Hooks的使用限制有哪些？","slug":"react-hooks的使用限制有哪些","link":"#react-hooks的使用限制有哪些","children":[]},{"level":2,"title":"React fiber是什么？有什么用？","slug":"react-fiber是什么-有什么用","link":"#react-fiber是什么-有什么用","children":[]},{"level":2,"title":"React18和之前版本的区别","slug":"react18和之前版本的区别","link":"#react18和之前版本的区别","children":[]},{"level":2,"title":"为什么说React中的props是只读的？","slug":"为什么说react中的props是只读的","link":"#为什么说react中的props是只读的","children":[]},{"level":2,"title":"React Fiber它的目的是解决什么问题？","slug":"react-fiber它的目的是解决什么问题","link":"#react-fiber它的目的是解决什么问题","children":[]},{"level":2,"title":"React组件化","slug":"react组件化","link":"#react组件化","children":[]},{"level":2,"title":"Redux","slug":"redux","link":"#redux","children":[{"level":3,"title":"如何使用","slug":"如何使用","link":"#如何使用","children":[]}]},{"level":2,"title":"React 路由","slug":"react-路由","link":"#react-路由","children":[]},{"level":2,"title":"React性能优化","slug":"react性能优化","link":"#react性能优化","children":[]}],"git":{"updatedTime":1738722167000,"contributors":[{"name":"LiHegui","username":"LiHegui","email":"1487647822@qq.com","commits":1,"url":"https://github.com/LiHegui"}]},"filePathRelative":"interview/React/index.md"}');export{R as comp,y as data};
