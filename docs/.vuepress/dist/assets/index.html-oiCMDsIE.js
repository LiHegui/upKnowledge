import{_ as a,c as e,a as l,o as t}from"./app-DPjPDnzl.js";const r={};function o(s,i){return t(),e("div",null,i[0]||(i[0]=[l('<h1 id="垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#垃圾回收机制"><span>垃圾回收机制</span></a></h1><ul><li><p>GC</p></li><li><p>垃圾回收策略 JavaScript有一个概念叫做可达性，就是那种以某种方式可访问可用的值。反之需要释放。</p><ul><li>标记清除法 <ol><li>垃圾收集器在运行时会给内存中的所有变量都加上一个标记，假设内存中所有对象都是垃圾，全标记为0 然后从各个根对象开始遍历，把不是垃圾的节点改成1</li><li>清理所有标记为0的垃圾，销毁并回收它们所占用的内存空间</li><li>最后，把所有内存中对象标记修改为0，等待下一轮垃圾回收</li></ol></li><li>引用计数法 <ol><li>当声明了一个变量并且将一个引用类型赋值给该变量的时候这个值的引用次数就为 1</li><li>如果同一个值又被赋给另一个变量，那么引用数加 1</li><li>如果该变量的值被其他的值覆盖了，则引用次数减 1</li><li>当这个值的引用次数变为 0 的时候，说明没有变量在使用，这个值没法被访问了，回收空间，垃圾回收器会在运行的时候清理掉引用次数为 0 的值占用的内存</li></ol></li></ul></li></ul><h1 id="说说-javascript-中内存泄漏的几种情况" tabindex="-1"><a class="header-anchor" href="#说说-javascript-中内存泄漏的几种情况"><span>说说 JavaScript 中内存泄漏的几种情况？</span></a></h1>',3)]))}const c=a(r,[["render",o],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/tools/docs/interview/JavaScript/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/","title":"垃圾回收机制","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"updatedTime":1738722167000,"contributors":[{"name":"LiHegui","username":"LiHegui","email":"1487647822@qq.com","commits":1,"url":"https://github.com/LiHegui"}]},"filePathRelative":"tools/docs/interview/JavaScript/垃圾回收机制/index.md"}');export{c as comp,p as data};
