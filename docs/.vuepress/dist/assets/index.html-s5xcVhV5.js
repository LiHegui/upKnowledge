import{_ as a,c as s,a as n,o as i}from"./app-DPjPDnzl.js";const l={};function t(r,e){return i(),s("div",null,e[0]||(e[0]=[n(`<h1 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h1><h2 id="数组的相关方法" tabindex="-1"><a class="header-anchor" href="#数组的相关方法"><span>数组的相关方法</span></a></h2><ul><li>push 数组末尾推进一个元素 返回数组添加后的长度</li><li>pop 数组末尾弹出一个元素 返回弹出元素</li><li>shift 数组头部弹出一个元素 返回弹出元素</li><li>unshift 数组头部加入一个元素 返回数组添加后的长度</li><li>splice 替换 splice(start, deleteCount, ...items)：从数组中删除或插入元素，返回被删除的元素。其中，start 指定了删除或插入的起始位置，deleteCount 指定了删除的元素个数，items 是要插入的元素。例如： 参数 开始位置 删除个数 添加的元素</li><li>slice 截取，不会对原数组产生影响 参数 开始位置 结束位置（不包括结束位置的元素） 返回被截取的部分</li><li>forEach forEach(callback)：对数组中的每个元素执行一次回调函数。其中，callback 是一个接受三个参数的函数，分别为当前元素的值、当前元素的索引和数组本身。 forEach不可以用break和continue跳出循环，只能通过return跳出当前回调函数 无返回值</li><li>some 对数组中的每个元素执行一次回调函数，如果有任意一个元素满足回调函数的条件，返回 true，否则返回 false。</li><li>map 对数组中的每个元素执行一次回调函数，返回一个新数组，新数组的元素是回调函数的返回值。 参数 当前值 序号 原数组 会返回一个新数组，新数组的元素是回调函数的返回值</li><li>every 对数组中的每个元素执行一次回调函数，如果所有元素都满足回调函数的条件，返回 true，否则返回 false。</li><li>reduce 累计的效果，不改变原数组<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">    console.log(array.reduce((accumulator, currentValue, index, array) =&gt; {</span>
<span class="line">        return accumulator + currentValue;</span>
<span class="line">    }));</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>callback接受四个参数，累计数，当前值，序号，原数组 返回为累计值</li><li>filter 过滤，不会改变原函数<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">    console.log(&#39;过滤掉2的倍数&#39;);</span>
<span class="line">    console.log(array.filter((item) =&gt; item % 2));</span>
<span class="line">    console.log(&#39;不改变原数组&#39;, array);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>返回值一个过滤后的新数组</li><li>sort 排序 <ul><li>正序sort(a,b)=&gt;a-b</li><li>倒叙sort(a,b)=&gt;b-a</li></ul></li></ul><h2 id="为什么会出现这种情况" tabindex="-1"><a class="header-anchor" href="#为什么会出现这种情况"><span>为什么会出现这种情况？</span></a></h2><h1 id="for-in和-for-of-的区别" tabindex="-1"><a class="header-anchor" href="#for-in和-for-of-的区别"><span>for in和 for of 的区别？</span></a></h1><p>for...in 和 for...of 都是 JavaScript 中用于遍历数据结构的循环语句，但它们的作用和用法有所不同。</p><ul><li>for...in 循环语句用于遍历对象的属性，语法如下：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 遍历对象的属性</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，key 是对象的属性名，object 是要遍历的对象。for...in 循环会依次遍历对象的可枚举属性，包括原型链上的属性，但不包括 Symbol 类型的属性。在遍历时，如果对象的属性是一个函数，也会被遍历出来。</p><p>for...of 循环语句用于遍历可迭代对象的元素，语法如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 遍历可迭代对象的元素</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，value 是可迭代对象的元素值，iterable 是要遍历的可迭代对象。for...of 循环会依次遍历可迭代对象的元素，包括数组、字符串、Set、Map 等内置的可迭代对象，也包括自定义的迭代器对象。在遍历时，不会遍历对象的属性，也不会遍历原型链上的属性。 总的来说，for...in 和 for...of 的区别在于它们遍历的对象不同，for...in 遍历对象的属性，for...of 遍历可迭代对象的元素。此外，for...in 循环不能遍历 Symbol 类型的属性，也不适用于遍历数组等有序集合，而 for...of 循环则可以遍历数组、字符串等有序集合，也可以使用自定义的迭代器对象。</p>`,12)]))}const c=a(l,[["render",t],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/tools/docs/interview/JavaScript/%E6%95%B0%E7%BB%84/","title":"数组","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"数组的相关方法","slug":"数组的相关方法","link":"#数组的相关方法","children":[]},{"level":2,"title":"为什么会出现这种情况？","slug":"为什么会出现这种情况","link":"#为什么会出现这种情况","children":[]}],"git":{"updatedTime":1738722167000,"contributors":[{"name":"LiHegui","username":"LiHegui","email":"1487647822@qq.com","commits":1,"url":"https://github.com/LiHegui"}]},"filePathRelative":"tools/docs/interview/JavaScript/数组/index.md"}');export{c as comp,p as data};
