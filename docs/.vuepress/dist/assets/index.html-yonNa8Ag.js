import{_ as n,c as a,a as l,o as i}from"./app-DPjPDnzl.js";const e={};function t(p,s){return i(),a("div",null,s[0]||(s[0]=[l(`<h1 id="css面试题" tabindex="-1"><a class="header-anchor" href="#css面试题"><span>CSS面试题</span></a></h1><h2 id="说说你对盒子模型的理解" tabindex="-1"><a class="header-anchor" href="#说说你对盒子模型的理解"><span>说说你对盒子模型的理解?</span></a></h2><p>二者就行切换 box-sizing: content-box(标准)|border-box(怪异盒子)|inherit(父元素继承)</p><ul><li>盒子模型 <ul><li>宽度 content + padding + border</li></ul></li><li>IE盒子模型 <ul><li>宽度 content</li></ul></li></ul><h2 id="回流与重绘" tabindex="-1"><a class="header-anchor" href="#回流与重绘"><span>回流与重绘</span></a></h2><ul><li>回流 是指当 DOM 元素的布局或几何属性发生改变时，浏览器需要重新计算元素的大小和位置，然后重新排列页面上受影响的元素的过程。这个过程是非常消耗性能的，因为它会触发多次的计算和布局，可能会导致页面的卡顿和响应延迟。</li><li>重绘 是指当 DOM 元素的样式属性发生改变时，浏览器需要重新绘制元素的外观，但不会影响元素的布局和位置。这个过程比回流消耗的性能要少一些，但仍然需要一定的计算和绘制。</li><li>措施 <ul><li>避免在布局完成后修改元素的样式，因为这会触发回流和重绘。</li><li>将需要多次访问的 DOM 元素缓存起来，避免重复的计算和布局。</li><li>使用 CSS3 的 transform 属性来代替修改元素的位置和大小，因为这不会触发回流。</li><li>合并多次修改样式的操作，避免多次触发回流和重绘。</li><li>尽可能减少页面中的 DOM 元素数量，因为更少的元素意味着更少的计算和布局。</li></ul></li></ul><h2 id="介绍盒模型" tabindex="-1"><a class="header-anchor" href="#介绍盒模型"><span>介绍盒模型</span></a></h2><p>盒子模型 content + padding + border + margin 标准盒子模型宽度为content IE怪异盒子模型宽度为 content + padding + border 二者之间的转换： 在使用 CSS 时，可以通过 box-sizing 属性来改变盒模型的解释方式，可以选择 content-box（W3C 盒模型）或 border-box</p><h2 id="doctype声明" tabindex="-1"><a class="header-anchor" href="#doctype声明"><span>DOCTYPE声明</span></a></h2><p>声明文档类型（DOCTYPE）可以告诉浏览器使用哪种 HTML 或 XHTML 规范解析文档</p><h2 id="css优先级" tabindex="-1"><a class="header-anchor" href="#css优先级"><span>CSS优先级</span></a></h2><ul><li>内联样式 1 0 0 0</li><li>id选择器 0 1 0 0</li><li>类选择器、属性选择器、伪类选择器 className、 a[ref=&#39;eee&#39;]、li:last-child 0 0 1 0</li><li>标签选择器、伪元素选择器 0 0 0 1</li><li>后代选择器 #div span 选择id为box元素内部所有的div元素 0</li><li>子选择器 #div&gt;span =&gt; 选择以父元素div的子元素span,一层 0</li><li>相邻同胞选择器 h1+p #div + #span =&gt; 选择紧跟在div后面的span元素 0</li><li>群组选择器 div,p =&gt;选择div、p的所有元素</li></ul><p>继承属性</p><ul><li>字体系列属性</li><li>文本系列属性</li><li>元素可见性</li><li>表格布局属性</li><li>列表属性</li><li>光标属性</li></ul><p><strong>延申一：css优先级会产生满10进位吗</strong></p><p>不会的</p><p>在CSS中，每个选择器的优先级是相互独立的，不会因为多个相同类型的选择器而产生进位。每个类选择器都有一个固定的权重，即10。因此，无论您在同一个元素上使用多少个相同的类选择器，它们的总权重仍然是10。</p><p>CSS优先级是通过计算选择器的权重来确定的，并且如果优先级相同，则后面的规则将覆盖前面的规则。这种进位机制确保了选择器的顺序在决定样式应用方面的重要性。</p><h2 id="谈谈你对bfc的理解" tabindex="-1"><a class="header-anchor" href="#谈谈你对bfc的理解"><span>谈谈你对BFC的理解？</span></a></h2><p>块级格式化上下文，它是页面中一块渲染区域，并且有一套属于自己的渲染规则：</p><ul><li>内部盒子会在垂直方向上一个接一个的放置，与方向无关。</li><li>BFC就是一个独立的隔离的独立容器，不会影响盒子之外的布局</li><li>内部的浮动元素也参与高度计算</li><li>BFC的区域不会与float元素产生重叠</li></ul><h2 id="触发条件" tabindex="-1"><a class="header-anchor" href="#触发条件"><span>触发条件</span></a></h2><ul><li>浮动元素 float</li><li>display inline-block flex inline-flex grid table</li><li>position absolute fixed</li></ul><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><ul><li>防止margin重叠</li><li>清除内部浮动</li><li>自适应多栏布局</li></ul><h1 id="如何实现单行-多行文本溢出的省略样式" tabindex="-1"><a class="header-anchor" href="#如何实现单行-多行文本溢出的省略样式"><span>如何实现单行／多行文本溢出的省略样式？</span></a></h1><h2 id="单行省略" tabindex="-1"><a class="header-anchor" href="#单行省略"><span>单行省略</span></a></h2><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css" data-title="css"><pre><code><span class="line"><span class="token selector">div</span><span class="token punctuation">{</span></span>
<span class="line">  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何实现多行省略" tabindex="-1"><a class="header-anchor" href="#如何实现多行省略"><span>如何实现多行省略？</span></a></h2><p>见ellipsis.html</p><ul><li>单行<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css" data-title="css"><pre><code><span class="line"><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>多行 这个可能有兼容性的问题<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css" data-title="css"><pre><code><span class="line"><span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>   </span>
<span class="line"><span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="元素水平垂直居中" tabindex="-1"><a class="header-anchor" href="#元素水平垂直居中"><span>元素水平垂直居中？</span></a></h2><ul><li>定位</li><li>margin 上面加上transform,或者自己搭配目的就是自身元素左上角在中间，然后就行自身偏移。</li><li>flex</li></ul><h2 id="css动画" tabindex="-1"><a class="header-anchor" href="#css动画"><span>css动画</span></a></h2><p>详细例子见animation.html</p><ul><li>transition 实现渐变动画</li><li>transform 转变动画</li><li>animation <ul><li>@keyframes 关键字定义动画0 <ul><li>from 开始状态</li><li>[number]% 中间状态</li><li>to 终结状态</li></ul></li><li><h2 id="关键属性" tabindex="-1"><a class="header-anchor" href="#关键属性"><span>关键属性</span></a></h2></li></ul> 实现自定义动画,可以定义一个动画的关键帧（即动画的起始状态、中间状态和结束状态），以及动画的持续时间、重复次数、延迟时间和动画效果等参数。</li></ul><h2 id="css如何画一个三角形-原理是什么" tabindex="-1"><a class="header-anchor" href="#css如何画一个三角形-原理是什么"><span>CSS如何画一个三角形？原理是什么？</span></a></h2><p>见triangle</p><p><a href="./triangle.html">demo</a></p>`,39)]))}const r=n(e,[["render",t],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/tools/docs/interview/CSS/","title":"CSS面试题","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"说说你对盒子模型的理解?","slug":"说说你对盒子模型的理解","link":"#说说你对盒子模型的理解","children":[]},{"level":2,"title":"回流与重绘","slug":"回流与重绘","link":"#回流与重绘","children":[]},{"level":2,"title":"介绍盒模型","slug":"介绍盒模型","link":"#介绍盒模型","children":[]},{"level":2,"title":"DOCTYPE声明","slug":"doctype声明","link":"#doctype声明","children":[]},{"level":2,"title":"CSS优先级","slug":"css优先级","link":"#css优先级","children":[]},{"level":2,"title":"谈谈你对BFC的理解？","slug":"谈谈你对bfc的理解","link":"#谈谈你对bfc的理解","children":[]},{"level":2,"title":"触发条件","slug":"触发条件","link":"#触发条件","children":[]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":2,"title":"单行省略","slug":"单行省略","link":"#单行省略","children":[]},{"level":2,"title":"如何实现多行省略？","slug":"如何实现多行省略","link":"#如何实现多行省略","children":[]},{"level":2,"title":"元素水平垂直居中？","slug":"元素水平垂直居中","link":"#元素水平垂直居中","children":[]},{"level":2,"title":"css动画","slug":"css动画","link":"#css动画","children":[]},{"level":2,"title":"CSS如何画一个三角形？原理是什么？","slug":"css如何画一个三角形-原理是什么","link":"#css如何画一个三角形-原理是什么","children":[]}],"git":{"updatedTime":1738722167000,"contributors":[{"name":"LiHegui","username":"LiHegui","email":"1487647822@qq.com","commits":1,"url":"https://github.com/LiHegui"}]},"filePathRelative":"tools/docs/interview/CSS/index.md"}');export{r as comp,d as data};
