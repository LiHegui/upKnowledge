import{_ as c,c as o,a as l,b as s,e as p,f as e,r as i,o as u,d as t}from"./app-DPjPDnzl.js";const r={},k={id:"对象🔍",tabindex:"-1"},d={class:"header-anchor",href:"#对象🔍"},v={id:"字符串🔍",tabindex:"-1"},m={class:"header-anchor",href:"#字符串🔍"},b={id:"原型🔍",tabindex:"-1"},h={class:"header-anchor",href:"#原型🔍"};function f(y,n){const a=i("RouteLink");return u(),o("div",null,[n[3]||(n[3]=l(`<h1 id="javascript面试题" tabindex="-1"><a class="header-anchor" href="#javascript面试题"><span>Javascript面试题</span></a></h1><h2 id="说说javascript中的数据类型-存储上的差别" tabindex="-1"><a class="header-anchor" href="#说说javascript中的数据类型-存储上的差别"><span>说说JavaScript中的数据类型？存储上的差别？</span></a></h2><ul><li>基本类型 <ul><li>number、string、boolean、null（音标：<code>/ nʌl /</code>） 、undefined、symbol</li><li>存储于栈上</li></ul></li><li>引用类型 <ul><li>统称为Object, 又可以细分为Function、Array等</li><li>引用类型的对象存储于堆中</li><li>引用类型对应的值存储在堆中，在栈中存放的是指向堆内存的地址</li><li>引用类型数据存放在堆中，每个堆内存对象都有对应的引用地址指向它，引用地址存放在栈中</li></ul></li></ul><h2 id="说说数组的常用方法有哪些" tabindex="-1"><a class="header-anchor" href="#说说数组的常用方法有哪些"><span>说说数组的常用方法有哪些？</span></a></h2><ul><li>push 数组末尾推进一个元素 返回数组添加后的长度</li><li>pop 数组末尾弹出一个元素 返回弹出元素</li><li>shift 数组头部弹出一个元素 返回弹出元素</li><li>unshift 数组头部加入一个元素 返回数组添加后的长度</li><li>splice 替换 splice(start, deleteCount, ...items)：从数组中删除或插入元素，返回被删除的元素。其中，start 指定了删除或插入的起始位置，deleteCount 指定了删除的元素个数，items 是要插入的元素。例如： 参数 开始位置 删除个数 添加的元素</li><li>slice 截取，不会对原数组产生影响 参数 开始位置 结束位置（不包括结束位置的元素） 返回被截取的部分</li><li>forEach forEach(callback)：对数组中的每个元素执行一次回调函数。其中，callback 是一个接受三个参数的函数，分别为当前元素的值、当前元素的索引和数组本身。 forEach不可以用break和continue跳出循环，只能通过return跳出当前回调函数 无返回值</li><li>some 对数组中的每个元素执行一次回调函数，如果有任意一个元素满足回调函数的条件，返回 true，否则返回 false。</li><li>map 对数组中的每个元素执行一次回调函数，返回一个新数组，新数组的元素是回调函数的返回值。 参数 当前值 序号 原数组 会返回一个新数组，新数组的元素是回调函数的返回值</li><li>every 对数组中的每个元素执行一次回调函数，如果所有元素都满足回调函数的条件，返回 true，否则返回 false。</li><li>reduce 累计的效果，不改变原数组<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>callback接受四个参数，累计数，当前值，序号，原数组 返回为累计值</li><li>filter 过滤，不会改变原函数<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;过滤掉2的倍数&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;不改变原数组&#39;</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>返回值一个过滤后的新数组</li><li>sort 排序 <ul><li>正序sort(a,b)=&gt;a-b</li><li>倒叙sort(a,b)=&gt;b-a</li></ul></li></ul><p><strong>手写filter方法</strong></p><p>好像手写这个没有什么意思，直接写就行了</p><h2 id="javascript字符串的常用方法有哪些" tabindex="-1"><a class="header-anchor" href="#javascript字符串的常用方法有哪些"><span>JavaScript字符串的常用方法有哪些？</span></a></h2><ul><li>chatAt 获取指定位置的字符</li><li>split 拆分为数组</li><li>concat 创建副本成新的字符串</li><li>match 匹配是否有相关字符</li><li>splice 参数说明起始位置， 删除几个 ，插入新元素</li><li>slice 参数说明起始位置 - 结束位置（默认为字符串length）</li><li>trim trimRight trimLeft</li><li>repeat</li><li>includes</li><li>indexOf</li><li>replace 参数说明：匹配元素， 替换元素</li><li>search</li></ul><h2 id="谈谈-javascript-中的类型转换机制" tabindex="-1"><a class="header-anchor" href="#谈谈-javascript-中的类型转换机制"><span>谈谈 JavaScript 中的类型转换机制？</span></a></h2><ul><li>隐式转换 <ul><li>转字符串：除了+有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值</li><li>转布尔值：在需要布尔值的地方，就会将非布尔值的参数自动转为布尔值，系统内部会调用Boolean函数</li></ul></li><li>强制转换 <ul><li>Number()</li><li>String()</li><li>parselent()</li><li>Boolean()</li></ul></li></ul><h2 id="和-区别-分别在什么情况使用" tabindex="-1"><a class="header-anchor" href="#和-区别-分别在什么情况使用"><span>== 和 ===区别，分别在什么情况使用？</span></a></h2><ol><li><p>== 比较值相等</p><p><strong>注意:</strong></p><ul><li><p>两个都为简单类型，字符串和布尔值都会转换成数值，再比较</p></li><li><p>简单类型与引用类型比较，对象转化成其原始类型的值，再比较</p></li><li><p>两个都为引用类型，则比较它们是否指向同一个对象</p></li><li><p>null 和 undefined 相等</p></li><li><p>存在 NaN 则返回 false</p></li></ul></li><li><p>=== 比较值和类型是否都相同</p></li></ol><p>相等操作符（==）会做类型转换，再进行值的比较，全等运算符不会做类型转换</p><h2 id="深拷贝浅拷贝的区别-如何实现一个深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝浅拷贝的区别-如何实现一个深拷贝"><span>深拷贝浅拷贝的区别？如何实现一个深拷贝？</span></a></h2><ul><li>浅拷贝 创建一个新的对象，然后将原始对象的属性值复制到新对象中。但是只复制一层，深层次的数据共享内存，改了新的对象，旧的对象也会受到影响。 <ul><li>拓展运算符</li><li>Array.prototype.slice 方法返回一个新的数组对象，用于数组</li><li>Array.prorotype.contact 合并数组， 用于数组</li><li>Object.assign const newFoo2 = Object.assign({}, foo)</li></ul></li><li>深拷贝 深拷贝是指创建一个新的对象，该对象包含与原始对象相同的数据，但是在内存中完全独立于原始对象。这意味着修改深拷贝后的对象不会影响原始对象，它们是彼此独立的。 <ul><li>Json处理一个简单的深拷贝,<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> newFoo <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li>递归拷贝<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//引入weakmap是用于存储拷贝过的对象及其对应的拷贝对象，避免循环引用导致无限递归</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span> <span class="token comment">// 如果是null或者undefined我就不进行拷贝操作</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 检查是否已经克隆过该对象，防止循环引用</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身</span></span>
<span class="line">    hash<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// for in 只能遍历对象上可枚举的string类型属性，采用Reflect.ownKeys比较好</span></span>
<span class="line">    <span class="token keyword">const</span> keys <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        cloneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 处理symbols</span></span>
<span class="line">    <span class="token keyword">const</span> symbols <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key_symbols <span class="token keyword">of</span> symbols<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        obj<span class="token punctuation">[</span>key_symbols<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key_symbols<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> cloneObj<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p><strong>处理循环引用</strong></p><ol><li><p>一个对象间的循环引用</p></li><li><p>两个对象间的循环引用</p></li></ol><p>注意：</p><p>json转换不了的类型 函数：JSON不支持JavaScript中的函数。如果尝试将包含函数的对象转换为JSON字符串，函数将被忽略或转换为null。 undefined：在JSON中，undefined值不被接受。如果尝试序列化一个包含undefined值的对象，undefined值将被忽略或转换为null。 日期对象：JSON不支持原生的JavaScript日期对象。在将对象序列化为JSON字符串时，日期对象会被转换为字符串（通常是ISO 8601格式的日期字符串）。在反序列化时，这个字符串可以被转换回日期对象。 NaN 和 Infinity：在JSON中，NaN（非数字）和Infinity（无穷大）值不被接受。如果尝试序列化一个包含这些值的对象，它们将被转换为null。 正则表达式：JSON不支持JavaScript的正则表达式对象。如果尝试将包含正则表达式的对象转换为JSON字符串，正则表达式将被忽略或转换为null。 特殊字符：在JSON字符串中，某些特殊字符（如换行符、制表符等）必须被转义（使用反斜杠\\）。如果不进行转义，这些字符可能会导致解析错误。 循环引用：如果JavaScript对象中存在循环引用（即一个对象直接或间接引用自己），那么尝试将其序列化为JSON字符串将导致错误。</p><h2 id="说说你对闭包的理解-闭包使用场景" tabindex="-1"><a class="header-anchor" href="#说说你对闭包的理解-闭包使用场景"><span>说说你对闭包的理解？闭包使用场景</span></a></h2><p><strong>闭包可以在一个内层函数中访问到其外层函数的作用域</strong></p><p>闭包是指那些引用了另一个函数作用域中变量的函数，通常是在嵌套函数中实现的 闭包让你在一个内层函数中访问其外层函数的变量 原理：作用域链，当前作用域可访问上层作用域 解决的问题：属性私有化，能够让函数作用域的变量在函数执行之后不会销毁，同时也能在函数外部可以访问函数内部的局部变量 带来的问题：内存泄漏</p><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h3><ul><li>创建私有变量<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"> <span class="token comment">// 模拟私有变量</span></span>
<span class="line"> <span class="token comment">// 私有变量是不能获取到的，但是可以通过闭包去获取</span></span>
<span class="line"> <span class="token keyword">let</span> Counter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">let</span> privateCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">     <span class="token keyword">function</span> <span class="token function">changeBy</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">         privateCounter <span class="token operator">+=</span> val<span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">     <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">             <span class="token function">changeBy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">         <span class="token function-variable function">decrement</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">             <span class="token function">changeBy</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">         <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">             <span class="token keyword">return</span> privateCounter<span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>延长变量的声明周期 闭包的应用：模块化、能够实现柯里化、防抖与节流</li></ul><h3 id="函数柯里化" tabindex="-1"><a class="header-anchor" href="#函数柯里化"><span>函数柯里化</span></a></h3><p>柯里化的目的在于避免频繁调用具有相同参数函数的同时，又能够轻松的重用</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 假设我们有一个求长方形面积的函数</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token parameter">width<span class="token punctuation">,</span> height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> width <span class="token operator">*</span> height</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 如果我们碰到的长方形的宽高是10</span></span>
<span class="line"><span class="token keyword">const</span> area1 <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> area2 <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> area3 <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 我们可以使用闭包柯里化这个计算面积的函数</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token parameter">width</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token parameter">height</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> width <span class="token operator">*</span> height</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> getTenWidthArea <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 之后碰到宽度为10的长方形就可以这样计算面积</span></span>
<span class="line"><span class="token keyword">const</span> area1 <span class="token operator">=</span> <span class="token function">getTenWidthArea</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 而且如果遇到宽度偶尔变化也可以轻松复用</span></span>
<span class="line"><span class="token keyword">const</span> getTwentyWidthArea <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="说说你对作用域链的理解" tabindex="-1"><a class="header-anchor" href="#说说你对作用域链的理解"><span>说说你对作用域链的理解</span></a></h2><p>作用域链，在Javascript中使用一个变量的时候，首先Javascript引擎会尝试在当前作用域下去寻找该变量，如果没找到，再到它的上层作用域寻找，以此类推直到找到该变量或是已经到了全局作用域</p><p>作用域我们可以分为块级作用域、函数作用域、全局作用域</p><p>存在包含关系</p><p>let 块级作用域，const 块级作用域，用于常量 =&gt; 也就是大括号之内的范围</p><p>var 函数作用域</p><h2 id="javascript原型-原型链-有什么特点" tabindex="-1"><a class="header-anchor" href="#javascript原型-原型链-有什么特点"><span>JavaScript原型，原型链 ? 有什么特点？</span></a></h2><p>每个函数都有一个属性叫做prototype,指向实例的原型对象,每个实例对象都会有个__proto__指向原型对象 原型对象都有一个constructor对象,指向构造函数。 当我们当问一个对象的属性时，JS会在这个对象的属性中进行查找，如果没有找到，就会沿着__proto__这个隐式 原型关联起来的链条向上一个对象查找</p><h2 id="javascript如何实现继承" tabindex="-1"><a class="header-anchor" href="#javascript如何实现继承"><span>Javascript如何实现继承？</span></a></h2><ul><li>原型链继承 数据污染</li><li>寄生组合式继承（最好的）</li></ul><h2 id="谈谈this对象的理解" tabindex="-1"><a class="header-anchor" href="#谈谈this对象的理解"><span>谈谈this对象的理解</span></a></h2><p>函数的调用方式决定了this的值</p><p>this 关键字是函数运行时自动生成的一个内部对象，只能在函数内部使用，总指向调用它的对象</p><ul><li>默认绑定 全局环境中定义的函数，非严格模式下，this会指向全局</li><li>隐式绑定 作为某个对象的方法中使用，会指向这个上级对象 这一点注意区分箭头函数，this的指向会往上越一级</li><li>new 指向实例</li><li>显示绑定 是指显示确定this的指向 apply call bind</li></ul><h2 id="javascript中执行上下文和执行栈是什么" tabindex="-1"><a class="header-anchor" href="#javascript中执行上下文和执行栈是什么"><span>JavaScript中执行上下文和执行栈是什么？</span></a></h2><p>执行上下文</p><ul><li>全局上下文</li><li>函数执行上下文</li><li>eval函数执行上下文</li></ul><h2 id="说说javascript中的事件模型" tabindex="-1"><a class="header-anchor" href="#说说javascript中的事件模型"><span>说说JavaScript中的事件模型</span></a></h2><p>DOM 是一个树形结构，交互操作常见的鼠标事件，点击事件等</p><p>事件流都会经历3个阶段</p><p>DOM事件模型中的事件对象常用属性 - type用于获取事件类型 - target获取事件目标 - stopPropagation()阻止事件冒泡 - preventDefault()阻止事件默认行为</p><ul><li>捕获阶段</li><li>目标阶段</li><li>冒泡阶段</li></ul><h2 id="typeof-与-instanceof-区别" tabindex="-1"><a class="header-anchor" href="#typeof-与-instanceof-区别"><span>typeof 与 instanceof 区别</span></a></h2><ul><li>typeof typeof会返回一个变量的基本类型，instanceof返回的是一个布尔值 而typeof 也存在弊端，它虽然可以判断基础数据类型（null 除外），但是引用数据类型中，除了function 类型以外，其他的也无法判断</li><li>instanceof instanceof 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型</li><li>Object.prototype.toString().call() [] 完美的获取类型方法<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> type  <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!==</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 先进行typeof判断，如果是基础数据类型，直接返回</span></span>
<span class="line">            <span class="token keyword">return</span> type<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 对于typeof返回结果是object的，再进行如下的判断，正则返回结果</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\[object (\\S+)\\]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="解释下什么是事件代理-应用场景" tabindex="-1"><a class="header-anchor" href="#解释下什么是事件代理-应用场景"><span>解释下什么是事件代理？应用场景？</span></a></h2><p>就是把一个元素的响应事件委托到另一个元素</p><p>事件委托就是在冒泡阶段完成的</p><p>事件流 捕获阶段 -&gt; 目标阶段 -&gt; 冒泡阶段 true false =&gt; 对于监听（addEventListener）的第三个参数</p><p>事件委托</p><p>点击子元素会触发事件冒泡，父组件也能相应这一事件，但是需要从事件哪里获取到是哪个子元素触发的，从而减少事件绑定，较少代码繁琐，优化性能</p><p>但是注意的是：</p><p>focus、blur这些事件没有事件冒泡机制，所以无法进行委托绑定事件</p><h2 id="说说new操作符具体干了什么" tabindex="-1"><a class="header-anchor" href="#说说new操作符具体干了什么"><span>说说new操作符具体干了什么？</span></a></h2><p>在JavaScript中，new操作符用于创建一个给定构造函数的实例对象</p><ul><li>开辟一个空间</li><li>创建一个新的对象</li><li>将对象与构建函数通过原型链连接起来</li><li>将构建函数中的this绑定到新建的对象obj上</li><li>根据构建函数返回类型作判断，如果是原始值则被忽略，如果是返回对象，需要正常处理</li></ul><p><strong>如何实现一个new关键字</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token parameter">Func<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 新建一个对象</span></span>
<span class="line">    obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Func</span><span class="token punctuation">.</span>prototype <span class="token comment">// 原型链链接</span></span>
<span class="line">    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">Func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> result <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token operator">?</span> result <span class="token operator">:</span> obj</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ajax原理是什么-如何实现" tabindex="-1"><a class="header-anchor" href="#ajax原理是什么-如何实现"><span>ajax原理是什么？如何实现？</span></a></h2><p>ajax是通过XmlHttpRequest实现的，可以向服务器发异步请求</p><p>实现过程</p><ol><li>创建一个XmlHttpRequest对象</li><li>通过 XMLHttpRequest 对象的 open() 方法与服务端建立连接</li><li>构建请求所需的数据内容，并通过XMLHttpRequest 对象的 send() 方法发送给服务器端</li><li>通过 XMLHttpRequest 对象提供的 onreadystatechange 事件监听服务器端你的通信状态 只要 readyState属性值一变化，就会触发一次 readystatechange 事件 XMLHttpRequest.responseText属性用于接收服务器端的响应结果</li><li>接受并处理服务端向客户端响应的数据结果</li></ol><p><strong>如何实现一个ajax</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 如何实现一个ajax</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Axios</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> <span class="token punctuation">{</span>url <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">=</span> config</span>
<span class="line">            <span class="token comment">// 发送xhr请求</span></span>
<span class="line">            <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">            xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">CreateAxiosFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> axios <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Axios</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> req <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>axios<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> req<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 得到最后的全局变量axios</span></span>
<span class="line"><span class="token keyword">let</span> axios <span class="token operator">=</span> <span class="token function">CreateAxiosFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>完成版封装ajax</strong></p><h2 id="bind、call、apply-区别-如何实现一个bind" tabindex="-1"><a class="header-anchor" href="#bind、call、apply-区别-如何实现一个bind"><span>bind、call、apply 区别？如何实现一个bind?</span></a></h2><p>改变函数执行时的上下文</p><ul><li>call this指向，参数列表<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">myname</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>apply this指向，一组数据（数组传入）<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;李华&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>bind this指向，参数列表<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">const</span> temp_fn <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">temp_fn</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">// 支持多次传入</span></span>
<span class="line">    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>如何实现一个bind</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 实现一个bind</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">context</span> </span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 判断调用对象是否为函数</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;Error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 根据调用方式，传入不同绑定值</span></span>
<span class="line">        <span class="token comment">// 就是防止生成的函数，被当作构造函数用</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Fn</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span> <span class="token operator">:</span> context<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> temp_fn <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">myBind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">temp_fn</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// const temp = new temp_fn()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="说说你对事件循环的理解" tabindex="-1"><a class="header-anchor" href="#说说你对事件循环的理解"><span>说说你对事件循环的理解</span></a></h2><p>Javascript是一个单线程的语言</p><p>所有的任务都可以分为</p><ul><li><p>异步任务</p><ul><li>宏任务</li><li>微任务</li></ul></li><li><p>同步任务</p></li><li><p>异步事件</p><ul><li>异步</li><li>微任务</li></ul></li><li><p>同步任务</p></li></ul><h2 id="dom常见的操作有哪些" tabindex="-1"><a class="header-anchor" href="#dom常见的操作有哪些"><span>DOM常见的操作有哪些？</span></a></h2><h2 id="说说你对bom的理解-常见的bom对象你了解哪些" tabindex="-1"><a class="header-anchor" href="#说说你对bom的理解-常见的bom对象你了解哪些"><span>说说你对BOM的理解，常见的BOM对象你了解哪些？</span></a></h2><h2 id="说说-javascript-中内存泄漏的几种情况" tabindex="-1"><a class="header-anchor" href="#说说-javascript-中内存泄漏的几种情况"><span>说说 JavaScript 中内存泄漏的几种情况？</span></a></h2><h2 id="说说你对正则表达式的理解-应用场景" tabindex="-1"><a class="header-anchor" href="#说说你对正则表达式的理解-应用场景"><span>说说你对正则表达式的理解？应用场景？</span></a></h2><h2 id="for-in-和-for-of-的区别" tabindex="-1"><a class="header-anchor" href="#for-in-和-for-of-的区别"><span>for in 和 for of 的区别</span></a></h2><p>for...in 和 for...of 都是 JavaScript 中用于遍历数据结构的循环语句，但它们的作用和用法有所不同。</p><ul><li>for...in 循环语句用于遍历对象的属性，语法如下：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 遍历对象的属性</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，key 是对象的属性名，object 是要遍历的对象。for...in 循环会依次遍历对象的可枚举属性，包括原型链上的属性，但不包括 Symbol 类型的属性。在遍历时，如果对象的属性是一个函数，也会被遍历出来。</p><p>for...of 循环语句用于遍历可迭代对象的元素，语法如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 遍历可迭代对象的元素</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，value 是可迭代对象的元素值，iterable 是要遍历的可迭代对象。for...of 循环会依次遍历可迭代对象的元素，包括数组、字符串、Set、Map 等内置的可迭代对象，也包括自定义的迭代器对象。在遍历时，不会遍历对象的属性，也不会遍历原型链上的属性。 总的来说，for...in 和 for...of 的区别在于它们遍历的对象不同，for...in 遍历对象的属性，for...of 遍历可迭代对象的元素。此外，for...in 循环不能遍历 Symbol 类型的属性，也不适用于遍历数组等有序集合，而 for...of 循环则可以遍历数组、字符串等有序集合，也可以使用自定义的迭代器对象。</p><h2 id="说说javascript为什么是单线程" tabindex="-1"><a class="header-anchor" href="#说说javascript为什么是单线程"><span>说说JavaScript为什么是单线程?</span></a></h2><p>JavaScript是单线程的，这是由于JavaScript的最初设计和历史原因所决定的。</p><ul><li>Web Worker提供了一个多线程的解决方案。 Web Workder可以在后台创建一个线程运行JavaScript代码，但是这个线程不能访问DOM和其它浏览器API。</li></ul><h2 id="实现异步的几种方式" tabindex="-1"><a class="header-anchor" href="#实现异步的几种方式"><span>实现异步的几种方式</span></a></h2><p>js 语言执行环境是&quot;单线程&quot; 所谓单线程，就是指一次只能完成一件任务。如果有多个任务，就必须排队。前面一个任务完成，再执行后面的一个任务。</p><ul><li><p>回调函数 回调函数就是将函数作为参数，传入一个函数中，就行调用。函数中一般要结合其他的异步函数，才能达到异步函数的效果 但是回调函数与异步函数并无直接联系，只是回调函数喜欢用回调的方式呈现。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token comment">// 普通回调函数</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 借助异步函数setTimeout</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> times</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> times<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>事件监听 事件总线、发布与订阅中的监听事件 一方发布，多方接受，接受发布事件并相应 事件总线实现方式</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line">    <span class="token keyword">type</span> <span class="token class-name">Callback<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>payload<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">EventBus<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">private</span> events<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Callback<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">on</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> callback<span class="token operator">:</span> Callback<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">emit</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> payload<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token function">forEach</span><span class="token punctuation">(</span>callback <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">callback</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">off</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> callback<span class="token operator">:</span> Callback<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>cb <span class="token operator">=&gt;</span> cb <span class="token operator">!==</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>events <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>订阅与发布代码实现</p></li><li><p>定时器</p></li><li><p>Promise</p><ul><li>Promise是什么？ Promise解决了回调地狱的问题，在传统的异步编程中，如果异步之间存在依赖关系，我们就需要层层嵌套满足这种依赖关系，可读性和可维护性就会变得很差，Promise的出现让其变成链式调用，增强了可读性和可维护性。 Promise是处理异步的一种方式，Promise常用的有then、catch等方法 Promise函数内部属于同步任务，.then()属于微任务（异步任务中的微任务），.catch()用来捕捉错误 <ul><li>事件循环 同步任务，异步任务又分异步任务和微任务 先执行同步任务，然后去执行微任务，微任务执行完毕后，去执行异步任务，每执行一个异步任务，都会检查有没有同步任务和 微任务，有就按顺序去执行，再去执行异步任务，一直循环，直到所有任务执行结束。</li></ul></li><li>如何实现一个Promise？</li></ul></li><li><p>Generator</p></li><li><p>async与await</p></li></ul><h2 id="垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#垃圾回收机制"><span>垃圾回收机制</span></a></h2><ul><li><p>GC</p></li><li><p>垃圾回收策略 JavaScript有一个概念叫做可达性，就是那种以某种方式可访问可用的值。反之需要释放。</p><ul><li>标记清除法 <ol><li>垃圾收集器在运行时会给内存中的所有变量都加上一个标记，假设内存中所有对象都是垃圾，全标记为0 然后从各个根对象开始遍历，把不是垃圾的节点改成1</li><li>清理所有标记为0的垃圾，销毁并回收它们所占用的内存空间</li><li>最后，把所有内存中对象标记修改为0，等待下一轮垃圾回收</li></ol></li><li>引用计数法 <ol><li>当声明了一个变量并且将一个引用类型赋值给该变量的时候这个值的引用次数就为 1</li><li>如果同一个值又被赋给另一个变量，那么引用数加 1</li><li>如果该变量的值被其他的值覆盖了，则引用次数减 1</li><li>当这个值的引用次数变为 0 的时候，说明没有变量在使用，这个值没法被访问了，回收空间，垃圾回收器会在运行的时候清理掉引用次数为 0 的值占用的内存</li></ol></li></ul></li></ul><p><a href="https://www.bilibili.com/video/BV1fs4y1Y7DT/?spm_id_from=333.337.search-card.all.click&amp;vd_source=f74fc394a7455cc604f3b6a7c1458e76" target="_blank" rel="noopener noreferrer">推荐视频</a></p><h2 id="说说javascript中的数据类型-存储上的差别-1" tabindex="-1"><a class="header-anchor" href="#说说javascript中的数据类型-存储上的差别-1"><span>说说JavaScript中的数据类型？存储上的差别？</span></a></h2><ul><li>基本类型 <ul><li>number</li><li>boolean</li><li>undefined</li><li>string</li><li>null</li><li>NAN</li><li>symbol symbol是原始值，且符号实例是唯一的、不可变的。符号的确定是确保对象属性使用唯一表示符，不会发生属性冲突的危险。</li></ul></li><li>复杂类型 <ul><li>Object</li><li>Array</li><li>Function</li></ul></li></ul><h2 id="堆栈的区别" tabindex="-1"><a class="header-anchor" href="#堆栈的区别"><span>堆栈的区别</span></a></h2><h2 id="null和undefine的区别" tabindex="-1"><a class="header-anchor" href="#null和undefine的区别"><span>null和undefine的区别</span></a></h2><p>null 和 undefined 都表示空值 null 表示一个被明确赋值为 null 的变量或对象属性。null 常用于表示一个不存在的对象，或者将一个对象的值空 undefined 表示一个声明了但未被赋值的变量，或者访问一个不存在的属性或数组元素时返回的值 二者都存在于栈内存</p><h2 id="let-const-var" tabindex="-1"><a class="header-anchor" href="#let-const-var"><span>let const var</span></a></h2><p>var 表示定义变量 为函数作用域，存在变量提升 let 表示定义变量，为块级作用域 const 表示为常量，表示不允许更改，其实只要不改变值的地址就可以了，可以改变对象的属性。块级作用域变量。</p><h2 id="防抖与节流" tabindex="-1"><a class="header-anchor" href="#防抖与节流"><span>防抖与节流</span></a></h2>`,110)),s("h2",k,[s("a",d,[s("span",null,[p(a,{to:"/interview/JavaScript/Object/"},{default:e(()=>n[0]||(n[0]=[t("对象🔍")])),_:1})])])]),s("h2",v,[s("a",m,[s("span",null,[p(a,{to:"/interview/JavaScript/String/"},{default:e(()=>n[1]||(n[1]=[t("字符串🔍")])),_:1})])])]),s("h2",b,[s("a",h,[s("span",null,[p(a,{to:"/interview/JavaScript/%E5%8E%9F%E5%9E%8B/"},{default:e(()=>n[2]||(n[2]=[t("原型🔍")])),_:1})])])]),n[4]||(n[4]=l(`<h2 id="如何获取元素的位置信息" tabindex="-1"><a class="header-anchor" href="#如何获取元素的位置信息"><span>如何获取元素的位置信息</span></a></h2><p>通过一些获取元素的方法</p><p>自身的属性</p><ul><li>clinetWidth、clientHeight content+padding</li><li>offsetWidth、offsetHeight content+ padding + border</li><li>offsetTop、offsetLeft 距离窗口的距离</li><li>scrollTop 返回元素上边缘与视图之间的距离</li></ul><p>快速获取位置的方法 getBoundingClientRect()</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">获取元素的相对位置：</span>
<span class="line"><span class="token keyword">var</span> <span class="token constant">X</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token constant">Y</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//再加上滚动出去的距离，就可以得到元素的绝对位置</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token constant">X</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left <span class="token operator">+</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token constant">Y</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top <span class="token operator">+</span> document<span class="token punctuation">.</span>docuemtElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件上传" tabindex="-1"><a class="header-anchor" href="#文件上传"><span>文件上传</span></a></h2><h3 id="大文件如何上传" tabindex="-1"><a class="header-anchor" href="#大文件如何上传"><span>大文件如何上传</span></a></h3><ul><li>分块上传 <ol><li>按照一定的规则对数据进行分块</li><li>按照一定的策略上传，每个分片带有本次上传的唯一标识</li><li>服务端对文件的完整性进行校验，如果完整就会进行合并</li></ol></li><li>断点续传 <ol><li>把上传文件人为的分为几个部分</li></ol></li></ul><h2 id="迭代器生成器" tabindex="-1"><a class="header-anchor" href="#迭代器生成器"><span>迭代器生成器</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>迭代器 迭代器 其实本质上就是个对象, 只是它实现了特定的协议(约定), 让它能够被叫做 迭代器, 迭代器 其实就一种 设计模式, 它在 JS 中的表现形式就是一个对象定义了一个 next() 方法, 方法返回一个具有 value 和 done 属性的对象</li><li>生成器 生成器 是一种特殊的 JS 函数, 它使用 function* 关键字来进行定义, 该函数会返回一个 Generator 对象, 该对象是符合 迭代器协议 的, 所以它本质上就是个 迭代器</li></ul></div><h3 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器"><span>迭代器</span></a></h3><p><strong>可迭代协议:</strong></p><p>在 ES6 中, 允许在对象中通过 Symbol.iterator 属性来定义或定制对象的 迭代行为, Symbol.iterator 是一个方法, 该方法返回一个 迭代器, 也只有实现了该协议(规定)的对象才能够被 for...of 给循环遍历</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> i<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>循环可迭代对象</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 下面是演示代码: 方法 forOf 模拟了循环 可迭代对象 的流程, 并且打印出了每次迭代的值</span></span>
<span class="line"><span class="token comment">// 可迭代对象</span></span>
<span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> i<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 自定义方法: 循环打印迭代对象的值</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">forOf</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> iterator <span class="token operator">=</span> obj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">let</span> done <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> current <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    done <span class="token operator">=</span> current<span class="token punctuation">.</span>done</span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;forOf&#39;</span><span class="token punctuation">,</span> current<span class="token punctuation">.</span>value<span class="token punctuation">)</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">forOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 打印: forOf 0、forOf 1、forOf 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>先调用Symbol.iterator函数， 生成一个迭代器</li><li>循环调用next()</li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>其实 for...of 只能用于循环 可迭代对象, 当然除了 for...of 下面这些语法、方法也都必须要求操作对象是一个 可迭代对象</p><p>可以使用 for...of 循环数组, 但是不能循环 普通对象, 循环 普通对象 将会提示对象是不可迭代的, 如下代码: for...of 能够正常循环数组、但是不能循环普通对象 obj</p></div><h3 id="生成器" tabindex="-1"><a class="header-anchor" href="#生成器"><span>生成器</span></a></h3><p><strong>生成器返回一个可迭代迭代器</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">generator</span><span class="token punctuation">(</span><span class="token parameter">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">  <span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">yield</span> index</span>
<span class="line">    index <span class="token operator">++</span> </span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 直接循环生成器产物</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> <span class="token function">generator</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 1 2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22))])}const w=c(r,[["render",f],["__file","route.html.vue"]]),j=JSON.parse('{"path":"/interview/JavaScript/route.html","title":"Javascript面试题","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"说说JavaScript中的数据类型？存储上的差别？","slug":"说说javascript中的数据类型-存储上的差别","link":"#说说javascript中的数据类型-存储上的差别","children":[]},{"level":2,"title":"说说数组的常用方法有哪些？","slug":"说说数组的常用方法有哪些","link":"#说说数组的常用方法有哪些","children":[]},{"level":2,"title":"JavaScript字符串的常用方法有哪些？","slug":"javascript字符串的常用方法有哪些","link":"#javascript字符串的常用方法有哪些","children":[]},{"level":2,"title":"谈谈 JavaScript 中的类型转换机制？","slug":"谈谈-javascript-中的类型转换机制","link":"#谈谈-javascript-中的类型转换机制","children":[]},{"level":2,"title":"== 和 ===区别，分别在什么情况使用？","slug":"和-区别-分别在什么情况使用","link":"#和-区别-分别在什么情况使用","children":[]},{"level":2,"title":"深拷贝浅拷贝的区别？如何实现一个深拷贝？","slug":"深拷贝浅拷贝的区别-如何实现一个深拷贝","link":"#深拷贝浅拷贝的区别-如何实现一个深拷贝","children":[]},{"level":2,"title":"说说你对闭包的理解？闭包使用场景","slug":"说说你对闭包的理解-闭包使用场景","link":"#说说你对闭包的理解-闭包使用场景","children":[{"level":3,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":3,"title":"函数柯里化","slug":"函数柯里化","link":"#函数柯里化","children":[]}]},{"level":2,"title":"说说你对作用域链的理解","slug":"说说你对作用域链的理解","link":"#说说你对作用域链的理解","children":[]},{"level":2,"title":"JavaScript原型，原型链 ? 有什么特点？","slug":"javascript原型-原型链-有什么特点","link":"#javascript原型-原型链-有什么特点","children":[]},{"level":2,"title":"Javascript如何实现继承？","slug":"javascript如何实现继承","link":"#javascript如何实现继承","children":[]},{"level":2,"title":"谈谈this对象的理解","slug":"谈谈this对象的理解","link":"#谈谈this对象的理解","children":[]},{"level":2,"title":"JavaScript中执行上下文和执行栈是什么？","slug":"javascript中执行上下文和执行栈是什么","link":"#javascript中执行上下文和执行栈是什么","children":[]},{"level":2,"title":"说说JavaScript中的事件模型","slug":"说说javascript中的事件模型","link":"#说说javascript中的事件模型","children":[]},{"level":2,"title":"typeof 与 instanceof 区别","slug":"typeof-与-instanceof-区别","link":"#typeof-与-instanceof-区别","children":[]},{"level":2,"title":"解释下什么是事件代理？应用场景？","slug":"解释下什么是事件代理-应用场景","link":"#解释下什么是事件代理-应用场景","children":[]},{"level":2,"title":"说说new操作符具体干了什么？","slug":"说说new操作符具体干了什么","link":"#说说new操作符具体干了什么","children":[]},{"level":2,"title":"ajax原理是什么？如何实现？","slug":"ajax原理是什么-如何实现","link":"#ajax原理是什么-如何实现","children":[]},{"level":2,"title":"bind、call、apply 区别？如何实现一个bind?","slug":"bind、call、apply-区别-如何实现一个bind","link":"#bind、call、apply-区别-如何实现一个bind","children":[]},{"level":2,"title":"说说你对事件循环的理解","slug":"说说你对事件循环的理解","link":"#说说你对事件循环的理解","children":[]},{"level":2,"title":"DOM常见的操作有哪些？","slug":"dom常见的操作有哪些","link":"#dom常见的操作有哪些","children":[]},{"level":2,"title":"说说你对BOM的理解，常见的BOM对象你了解哪些？","slug":"说说你对bom的理解-常见的bom对象你了解哪些","link":"#说说你对bom的理解-常见的bom对象你了解哪些","children":[]},{"level":2,"title":"说说 JavaScript 中内存泄漏的几种情况？","slug":"说说-javascript-中内存泄漏的几种情况","link":"#说说-javascript-中内存泄漏的几种情况","children":[]},{"level":2,"title":"说说你对正则表达式的理解？应用场景？","slug":"说说你对正则表达式的理解-应用场景","link":"#说说你对正则表达式的理解-应用场景","children":[]},{"level":2,"title":"for in 和 for of 的区别","slug":"for-in-和-for-of-的区别","link":"#for-in-和-for-of-的区别","children":[]},{"level":2,"title":"说说JavaScript为什么是单线程?","slug":"说说javascript为什么是单线程","link":"#说说javascript为什么是单线程","children":[]},{"level":2,"title":"实现异步的几种方式","slug":"实现异步的几种方式","link":"#实现异步的几种方式","children":[]},{"level":2,"title":"垃圾回收机制","slug":"垃圾回收机制","link":"#垃圾回收机制","children":[]},{"level":2,"title":"说说JavaScript中的数据类型？存储上的差别？","slug":"说说javascript中的数据类型-存储上的差别-1","link":"#说说javascript中的数据类型-存储上的差别-1","children":[]},{"level":2,"title":"堆栈的区别","slug":"堆栈的区别","link":"#堆栈的区别","children":[]},{"level":2,"title":"null和undefine的区别","slug":"null和undefine的区别","link":"#null和undefine的区别","children":[]},{"level":2,"title":"let const var","slug":"let-const-var","link":"#let-const-var","children":[]},{"level":2,"title":"防抖与节流","slug":"防抖与节流","link":"#防抖与节流","children":[]},{"level":2,"title":"对象🔍","slug":"对象🔍","link":"#对象🔍","children":[]},{"level":2,"title":"字符串🔍","slug":"字符串🔍","link":"#字符串🔍","children":[]},{"level":2,"title":"原型🔍","slug":"原型🔍","link":"#原型🔍","children":[]},{"level":2,"title":"如何获取元素的位置信息","slug":"如何获取元素的位置信息","link":"#如何获取元素的位置信息","children":[]},{"level":2,"title":"文件上传","slug":"文件上传","link":"#文件上传","children":[{"level":3,"title":"大文件如何上传","slug":"大文件如何上传","link":"#大文件如何上传","children":[]}]},{"level":2,"title":"迭代器生成器","slug":"迭代器生成器","link":"#迭代器生成器","children":[{"level":3,"title":"迭代器","slug":"迭代器","link":"#迭代器","children":[]},{"level":3,"title":"生成器","slug":"生成器","link":"#生成器","children":[]}]}],"git":{"updatedTime":1738911109000,"contributors":[{"name":"LiHegui","username":"LiHegui","email":"1487647822@qq.com","commits":2,"url":"https://github.com/LiHegui"}]},"filePathRelative":"interview/JavaScript/route.md"}');export{w as comp,j as data};
