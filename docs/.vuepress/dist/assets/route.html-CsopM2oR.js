import{_ as l,c as i,a as c,b as n,e as p,f as t,r as o,o as u,d as e}from"./app-DPjPDnzl.js";const r={},k={id:"set、map",tabindex:"-1"},d={class:"header-anchor",href:"#set、map"},v={id:"对象",tabindex:"-1"},m={class:"header-anchor",href:"#对象"},h={id:"字符串",tabindex:"-1"},b={class:"header-anchor",href:"#字符串"},f={id:"原型",tabindex:"-1"},g={class:"header-anchor",href:"#原型"};function y(w,s){const a=o("RouteLink");return u(),i("div",null,[s[4]||(s[4]=c(`<h1 id="javascript面试题" tabindex="-1"><a class="header-anchor" href="#javascript面试题"><span>Javascript面试题</span></a></h1><h2 id="说说javascript中的数据类型" tabindex="-1"><a class="header-anchor" href="#说说javascript中的数据类型"><span>说说JavaScript中的数据类型？</span></a></h2><ul><li>基本类型 <ul><li>number、string、boolean、null、undefined、symbol</li><li>存储于栈上</li></ul></li><li>引用类型 <ul><li>统称为Object, 又可以细分为Function、Array等</li><li>引用类型的对象存储于堆中</li><li>引用类型对应的值存储在堆中，在栈中存放的是指向堆内存的地址</li><li>引用类型数据存放在堆中，每个堆内存对象都有对应的引用地址指向它，引用地址存放在栈中</li></ul></li></ul><h2 id="谈谈-javascript-中的类型转换机制" tabindex="-1"><a class="header-anchor" href="#谈谈-javascript-中的类型转换机制"><span>谈谈 JavaScript 中的类型转换机制？</span></a></h2><ul><li>隐式转换 <ul><li>转字符串：除了+有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值</li><li>转布尔值：在需要布尔值的地方，就会将非布尔值的参数自动转为布尔值，系统内部会调用Boolean函数</li></ul></li><li>强制转换 <ul><li>Number()</li><li>String()</li><li>parselent()</li><li>Boolean()</li></ul></li></ul><h2 id="说说数组的常用方法有哪些" tabindex="-1"><a class="header-anchor" href="#说说数组的常用方法有哪些"><span>说说数组的常用方法有哪些？</span></a></h2><ul><li><p>作用于原数组</p><ul><li>push</li><li>pop</li><li>unshift 原数组开头添加任意个值，然后返回数组的最新长度</li><li>shift</li><li>splice 传入三个参数，分别是开始位置、0（要删除的元素数量）、插入的元素，返回空数组</li></ul></li><li><p>不影响原数组</p><ul><li>concat 首先会创建一个当前数组的副本，</li><li>forEach、map、filter、some、every等遍历方法</li><li>slice 一个新数组</li><li>join 拉平成字符串</li></ul></li></ul><p><strong>手写filter方法</strong> 好像手写这个没有什么意思，直接写就行了</p><h2 id="javascript字符串的常用方法有哪些" tabindex="-1"><a class="header-anchor" href="#javascript字符串的常用方法有哪些"><span>JavaScript字符串的常用方法有哪些？</span></a></h2><ul><li>chatAt 获取指定位置的字符</li><li>split 拆分为数组</li><li>concat 创建副本成新的字符串</li><li>match 匹配是否有相关字符</li><li>slice 参数说明起始位置 - 结束位置（默认为字符串length）</li><li>splice 参数说明起始位置， 删除几个 ，插入新元素</li><li>trim trimRight trimLeft</li><li>repeat</li><li>includes</li><li>indexOf</li><li>replace 参数说明：匹配元素， 替换元素</li><li>search</li></ul><h2 id="深拷贝浅拷贝的区别-如何实现一个深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝浅拷贝的区别-如何实现一个深拷贝"><span>深拷贝浅拷贝的区别？如何实现一个深拷贝？</span></a></h2><h2 id="typeof-与-instanceof-区别" tabindex="-1"><a class="header-anchor" href="#typeof-与-instanceof-区别"><span>typeof 与 instanceof 区别</span></a></h2><ul><li>typeof typeof会返回一个变量的基本类型，instanceof返回的是一个布尔值 而typeof 也存在弊端，它虽然可以判断基础数据类型（null 除外），但是引用数据类型中，除了function 类型以外，其他的也无法判断</li><li>instanceof instanceof 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型</li><li>Object.prototype.toString().call() [] 完美的获取类型方法<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> type  <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!==</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 先进行typeof判断，如果是基础数据类型，直接返回</span></span>
<span class="line">            <span class="token keyword">return</span> type<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 对于typeof返回结果是object的，再进行如下的判断，正则返回结果</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\[object (\\S+)\\]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="javascript原型-原型链-有什么特点" tabindex="-1"><a class="header-anchor" href="#javascript原型-原型链-有什么特点"><span>JavaScript原型，原型链 ? 有什么特点？</span></a></h2><p>每个函数都有一个属性叫做prototype,指向实例的原型对象,每个实例对象都会有个__proto__指向原型对象 原型对象都有一个constructor对象,指向构造函数。 当我们当问一个对象的属性时，JS会在这个对象的属性中进行查找，如果没有找到，就会沿着__proto__这个隐式 原型关联起来的链条向上一个对象查找</p><h2 id="for-in-和-for-of-的区别" tabindex="-1"><a class="header-anchor" href="#for-in-和-for-of-的区别"><span>for in 和 for of 的区别</span></a></h2><p>for in常用于遍历对象，而for of常用于遍历数组和类似数组的对象</p><ul><li>for in for in 语句用于遍历数组或者对象的属性（对数组或者对象的属性进行循环操作）。for in得到对对象的key或数组，字符串的下标。for of和forEach一样，是直接得到值。for of不能用于对象</li><li>for of 而for of输出的是数组的每一项的值</li></ul><h2 id="说说javascript中的事件模型" tabindex="-1"><a class="header-anchor" href="#说说javascript中的事件模型"><span>说说JavaScript中的事件模型</span></a></h2><p>DOM事件模型中的事件对象常用属性 - type用于获取事件类型 - target获取事件目标 - stopPropagation()阻止事件冒泡 - preventDefault()阻止事件默认行为</p><ul><li>捕获阶段</li><li>目标阶段</li><li>冒泡阶段</li></ul><h2 id="解释下什么是事件代理-应用场景" tabindex="-1"><a class="header-anchor" href="#解释下什么是事件代理-应用场景"><span>解释下什么是事件代理？应用场景？</span></a></h2><p>事件流 捕获阶段 -&gt; 目标阶段 -&gt; 冒泡阶段 true false =&gt; 对于监听（addEventListener）的第三个参数</p><p>事件委托</p><p>点击子元素会触发事件冒泡，父组件也能相应这一事件，但是需要从事件哪里获取到是哪个子元素触发的，从而减少事件绑定，较少代码繁琐，优化性能</p><p>但是注意的是：</p><p>focus、blur这些事件没有事件冒泡机制，所以无法进行委托绑定事件</p><h2 id="说说你对事件循环的理解" tabindex="-1"><a class="header-anchor" href="#说说你对事件循环的理解"><span>说说你对事件循环的理解</span></a></h2><ul><li>异步事件 <ul><li>异步</li><li>微任务</li></ul></li><li>同步任务</li></ul><h2 id="说说你对闭包的理解-闭包使用场景" tabindex="-1"><a class="header-anchor" href="#说说你对闭包的理解-闭包使用场景"><span>说说你对闭包的理解？闭包使用场景</span></a></h2><p><strong>闭包可以在一个内层函数中访问到其外层函数的作用域</strong></p><p>闭包是指那些引用了另一个函数作用域中变量的函数，通常是在嵌套函数中实现的 闭包让你在一个内层函数中访问其外层函数的变量 原理：作用域链，当前作用域可访问上层作用域 解决的问题：属性私有化，能够让函数作用域的变量在函数执行之后不会销毁，同时也能在函数外部可以访问函数内部的局部变量 带来的问题：内存泄漏</p><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><ul><li>创建私有变量<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"> <span class="token comment">// 模拟私有变量</span></span>
<span class="line"> <span class="token comment">// 私有变量是不能获取到的，但是可以通过闭包去获取</span></span>
<span class="line"> <span class="token keyword">let</span> Counter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">let</span> privateCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">     <span class="token keyword">function</span> <span class="token function">changeBy</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">         privateCounter <span class="token operator">+=</span> val<span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">     <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">             <span class="token function">changeBy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">         <span class="token function-variable function">decrement</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">             <span class="token function">changeBy</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">         <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">             <span class="token keyword">return</span> privateCounter<span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>延长变量的声明周期 闭包的应用：模块化、能够实现柯里化、防抖与节流</li></ul><h2 id="函数柯里化" tabindex="-1"><a class="header-anchor" href="#函数柯里化"><span>函数柯里化</span></a></h2><p>柯里化的目的在于避免频繁调用具有相同参数函数的同时，又能够轻松的重用</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 假设我们有一个求长方形面积的函数</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token parameter">width<span class="token punctuation">,</span> height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> width <span class="token operator">*</span> height</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 如果我们碰到的长方形的宽高是10</span></span>
<span class="line"><span class="token keyword">const</span> area1 <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> area2 <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> area3 <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 我们可以使用闭包柯里化这个计算面积的函数</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token parameter">width</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token parameter">height</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> width <span class="token operator">*</span> height</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> getTenWidthArea <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 之后碰到宽度为10的长方形就可以这样计算面积</span></span>
<span class="line"><span class="token keyword">const</span> area1 <span class="token operator">=</span> <span class="token function">getTenWidthArea</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 而且如果遇到宽度偶尔变化也可以轻松复用</span></span>
<span class="line"><span class="token keyword">const</span> getTwentyWidthArea <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="说说javascript为什么是单线程" tabindex="-1"><a class="header-anchor" href="#说说javascript为什么是单线程"><span>说说JavaScript为什么是单线程?</span></a></h2><p>JavaScript是单线程的，这是由于JavaScript的最初设计和历史原因所决定的。</p><ul><li>Web Worker提供了一个多线程的解决方案。 Web Workder可以在后台创建一个线程运行JavaScript代码，但是这个线程不能访问DOM和其它浏览器API。</li></ul><h2 id="实现异步的几种方式" tabindex="-1"><a class="header-anchor" href="#实现异步的几种方式"><span>实现异步的几种方式</span></a></h2><p>js 语言执行环境是&quot;单线程&quot; 所谓单线程，就是指一次只能完成一件任务。如果有多个任务，就必须排队。前面一个任务完成，再执行后面的一个任务。</p><ul><li><p>回调函数 回调函数就是将函数作为参数，传入一个函数中，就行调用。函数中一般要结合其他的异步函数，才能达到异步函数的效果 但是回调函数与异步函数并无直接联系，只是回调函数喜欢用回调的方式呈现。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token comment">// 普通回调函数</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 借助异步函数setTimeout</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> times</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> times<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>事件监听 事件总线、发布与订阅中的监听事件 一方发布，多方接受，接受发布事件并相应 事件总线实现方式</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line">    <span class="token keyword">type</span> <span class="token class-name">Callback<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>payload<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">EventBus<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">private</span> events<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Callback<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">on</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> callback<span class="token operator">:</span> Callback<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">emit</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> payload<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token function">forEach</span><span class="token punctuation">(</span>callback <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">callback</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">off</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> callback<span class="token operator">:</span> Callback<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>cb <span class="token operator">=&gt;</span> cb <span class="token operator">!==</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>events <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>订阅与发布代码实现</p></li><li><p>定时器</p></li><li><p>Promise</p><ul><li>Promise是什么？ Promise解决了回调地狱的问题，在传统的异步编程中，如果异步之间存在依赖关系，我们就需要层层嵌套满足这种依赖关系，可读性和可维护性就会变得很差，Promise的出现让其变成链式调用，增强了可读性和可维护性。 Promise是处理异步的一种方式，Promise常用的有then、catch等方法 Promise函数内部属于同步任务，.then()属于微任务（异步任务中的微任务），.catch()用来捕捉错误 <ul><li>事件循环 同步任务，异步任务又分异步任务和微任务 先执行同步任务，然后去执行微任务，微任务执行完毕后，去执行异步任务，每执行一个异步任务，都会检查有没有同步任务和 微任务，有就按顺序去执行，再去执行异步任务，一直循环，直到所有任务执行结束。</li></ul></li><li>如何实现一个Promise？</li></ul></li><li><p>Generator</p></li><li><p>async与await</p></li></ul>`,43)),n("h2",k,[n("a",d,[n("span",null,[p(a,{to:"/tools/docs/interview/JavaScript/Set%E3%80%81Map/"},{default:t(()=>s[0]||(s[0]=[e("Set、Map")])),_:1})])])]),n("h2",v,[n("a",m,[n("span",null,[p(a,{to:"/tools/docs/interview/JavaScript/Object/"},{default:t(()=>s[1]||(s[1]=[e("对象")])),_:1})])])]),n("h2",h,[n("a",b,[n("span",null,[p(a,{to:"/tools/docs/interview/JavaScript/String/"},{default:t(()=>s[2]||(s[2]=[e("字符串")])),_:1})])])]),n("h2",f,[n("a",g,[n("span",null,[p(a,{to:"/tools/docs/interview/JavaScript/%E5%8E%9F%E5%9E%8B/"},{default:t(()=>s[3]||(s[3]=[e("原型")])),_:1})])])]),s[5]||(s[5]=n("h2",{id:"迭代器生成器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#迭代器生成器"},[n("span",null,"迭代器生成器")])],-1))])}const x=l(r,[["render",y],["__file","route.html.vue"]]),S=JSON.parse('{"path":"/tools/docs/interview/JavaScript/route.html","title":"Javascript面试题","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"说说JavaScript中的数据类型？","slug":"说说javascript中的数据类型","link":"#说说javascript中的数据类型","children":[]},{"level":2,"title":"谈谈 JavaScript 中的类型转换机制？","slug":"谈谈-javascript-中的类型转换机制","link":"#谈谈-javascript-中的类型转换机制","children":[]},{"level":2,"title":"说说数组的常用方法有哪些？","slug":"说说数组的常用方法有哪些","link":"#说说数组的常用方法有哪些","children":[]},{"level":2,"title":"JavaScript字符串的常用方法有哪些？","slug":"javascript字符串的常用方法有哪些","link":"#javascript字符串的常用方法有哪些","children":[]},{"level":2,"title":"深拷贝浅拷贝的区别？如何实现一个深拷贝？","slug":"深拷贝浅拷贝的区别-如何实现一个深拷贝","link":"#深拷贝浅拷贝的区别-如何实现一个深拷贝","children":[]},{"level":2,"title":"typeof 与 instanceof 区别","slug":"typeof-与-instanceof-区别","link":"#typeof-与-instanceof-区别","children":[]},{"level":2,"title":"JavaScript原型，原型链 ? 有什么特点？","slug":"javascript原型-原型链-有什么特点","link":"#javascript原型-原型链-有什么特点","children":[]},{"level":2,"title":"for in 和 for of 的区别","slug":"for-in-和-for-of-的区别","link":"#for-in-和-for-of-的区别","children":[]},{"level":2,"title":"说说JavaScript中的事件模型","slug":"说说javascript中的事件模型","link":"#说说javascript中的事件模型","children":[]},{"level":2,"title":"解释下什么是事件代理？应用场景？","slug":"解释下什么是事件代理-应用场景","link":"#解释下什么是事件代理-应用场景","children":[]},{"level":2,"title":"说说你对事件循环的理解","slug":"说说你对事件循环的理解","link":"#说说你对事件循环的理解","children":[]},{"level":2,"title":"说说你对闭包的理解？闭包使用场景","slug":"说说你对闭包的理解-闭包使用场景","link":"#说说你对闭包的理解-闭包使用场景","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"函数柯里化","slug":"函数柯里化","link":"#函数柯里化","children":[]},{"level":2,"title":"说说JavaScript为什么是单线程?","slug":"说说javascript为什么是单线程","link":"#说说javascript为什么是单线程","children":[]},{"level":2,"title":"实现异步的几种方式","slug":"实现异步的几种方式","link":"#实现异步的几种方式","children":[]},{"level":2,"title":"Set、Map","slug":"set、map","link":"#set、map","children":[]},{"level":2,"title":"对象","slug":"对象","link":"#对象","children":[]},{"level":2,"title":"字符串","slug":"字符串","link":"#字符串","children":[]},{"level":2,"title":"原型","slug":"原型","link":"#原型","children":[]},{"level":2,"title":"迭代器生成器","slug":"迭代器生成器","link":"#迭代器生成器","children":[]}],"git":{"updatedTime":1738722167000,"contributors":[{"name":"LiHegui","username":"LiHegui","email":"1487647822@qq.com","commits":1,"url":"https://github.com/LiHegui"}]},"filePathRelative":"tools/docs/interview/JavaScript/route.md"}');export{x as comp,S as data};
