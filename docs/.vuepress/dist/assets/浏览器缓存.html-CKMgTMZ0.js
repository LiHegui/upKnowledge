import{_ as i,c as t,a as l,o as a}from"./app-DPjPDnzl.js";const n="/upKnowledge/assets/brower_cache-DQHToMdF.png",o={};function r(s,e){return a(),t("div",null,e[0]||(e[0]=[l('<h2 id="浏览器缓存-已发博客-李和贵" tabindex="-1"><a class="header-anchor" href="#浏览器缓存-已发博客-李和贵"><span>浏览器缓存（已发博客-李和贵）</span></a></h2><p>浏览器缓存机制（Http缓存机制）</p><p>浏览器第一次向服务器发送HTTP请求, 浏览器拿到请求结果后，会根据响应报文的缓存标识，决定是否进行缓存。</p><p>我们可以看出</p><ol><li>浏览器每次发送请求，都会先在浏览器中查找该请求的结果以及缓存标识</li><li>浏览器每次拿到结果都会将该结果和缓存标识存入浏览器缓存之中</li></ol><p>我们根据是否向服务端再次发起HTTP请求和缓存过程分为两个部分，分别是强制缓存和协商缓存</p><p>我们先做一下简单解释：</p><ul><li>🌊强制缓存就是向浏览器缓存查找结果，并根据该结果的缓存规则来决定是否使用该缓存的结果</li><li>🌊协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程</li></ul><h2 id="强制缓存" tabindex="-1"><a class="header-anchor" href="#强制缓存"><span>强制缓存</span></a></h2><p><strong>相关字段</strong></p><ul><li>Expires Expires是HTTP/1.0控制网页缓存的字段，其值为服务器返回该请求结果缓存的到期时间，即再次发起该请求时，如果客户端的时间小于Expires的值时，直接使用缓存结果</li><li>Cache-Control 在HTTP/1.1中，Cache-Control是最重要的规则，主要用于控制网页缓存，主要取值为 - public：所有内容都将被缓存（客户端和代理服务器都可缓存） - private：所有内容只有客户端可以缓存，Cache-Control的默认取值 - no-cache：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定 - no-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存 - max-age=xxx (xxx is numeric)：缓存内容将在xxx秒后失效</li></ul><h2 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存"><span>协商缓存</span></a></h2><p>协商缓存失效，返回304</p><p>两种场景</p><ol><li>协商缓存生效，返回304</li><li>协商缓存失效，返回200和请求结果结果 <strong>相关字段</strong></li></ol><ul><li>Last-Modified / If-Modified-Since Last-Modified是服务器响应请求时，返回该资源文件在服务器最后被修改的时间</li><li>Etag / If-None-Match Etag是服务器响应请求时，返回当前资源文件的一个唯一标识 If-None-Match是客户端再次发起该请求时，携带上次请求返回的唯一标识Etag值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有If-None-Match，则会根据If-None-Match的字段值与该资源在服务器的Etag值做对比，一致则返回304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为200</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><blockquote><p>强制缓存优先于协商缓存进行，若强制缓存(Expires和Cache-Control)生效则直接使用缓存，若不生效则进行协商缓存(Last-Modified / If-Modified-Since和Etag / If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回304，继续使用缓存</p></blockquote><p><img src="'+n+'" alt=""></p><p><strong>参考文章</strong><a href="https://juejin.cn/post/6844903593275817998?searchId=2024030320414000D873E39C0317B984BC" target="_blank" rel="noopener noreferrer">彻底理解浏览器的缓存机制</a></p>',20)]))}const p=i(o,[["render",r],["__file","浏览器缓存.html.vue"]]),h=JSON.parse('{"path":"/interview/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"浏览器缓存（已发博客-李和贵）","slug":"浏览器缓存-已发博客-李和贵","link":"#浏览器缓存-已发博客-李和贵","children":[]},{"level":2,"title":"强制缓存","slug":"强制缓存","link":"#强制缓存","children":[]},{"level":2,"title":"协商缓存","slug":"协商缓存","link":"#协商缓存","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1738722167000,"contributors":[{"name":"LiHegui","username":"LiHegui","email":"1487647822@qq.com","commits":1,"url":"https://github.com/LiHegui"}]},"filePathRelative":"interview/浏览器/浏览器缓存.md"}');export{p as comp,h as data};
